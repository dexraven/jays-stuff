module.exports =
  getDescription: (key) ->
    if key in descriptions
      return descriptions[key]
    else
      return null

descriptions = {
	'https://api.tabletopsimulator.com/lighting/#getambientequatorcolor':\
		'''<td><a class="anchor" id="getambientequatorcolor"></a>getAmbientEquatorColor()</td> <td>Returns Color Table of the gradient equator. Not used if <code class="codehilite">ambient_type = 1</code>.</td> <td align="right"><a href="../types#color"><span class="ret col"></span></a></td>''',
	'https://api.tabletopsimulator.com/turns/#member-variables':\
		'''<h2 id="member-variables">Member Variables<a class="headerlink" href="#member-variables" title="Permanent link"> </a></h2> <p>Like <a href="../object#member-variables">Object member variables</a>, Turns has its own member variables.</p> <table> <thead> <tr> <th>Variable</th> <th>Description</th> <th align="left">Type</th> </tr> </thead> <tbody> <tr> <td><a class="anchor" id="enable"></a>enable</td> <td>Enable/disable the turns system.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td> </tr> <tr> <td><a class="anchor" id="type"></a>type</td> <td>If the turn order is automatic or custom. 1=auto, 2=custom.</td> <td align="left"><a href="../types"><span class="tag int"></span></a></td> </tr> <tr> <td><a class="anchor" id="order"></a>order</td> <td>A table of strings, representing the player turn order.</td> <td align="left"><a href="../types"><span class="tag tab"></span></a></td> </tr> <tr> <td><a class="anchor" id="reverse_order"></a>reverse_order</td> <td>Enable/disable reversing turn rotation direction.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td> </tr> <tr> <td><a class="anchor" id="skip_empty_hands"></a>skip_empty_hands</td> <td>Enable/disable skipping empty hands.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td> </tr> <tr> <td><a class="anchor" id="disable_interactations"></a>disable_interactations</td> <td>Enable/disable the blocking of players ability to interact with Objects when it is not their turn.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td> </tr> <tr> <td><a class="anchor" id="pass_turns"></a>pass_turns</td> <td>Enable/disable a player's ability to pass their turn to another.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td> </tr> <tr> <td><a class="anchor" id="turn_color"></a>turn_color</td> <td>The color of the Player who's turn it is.</td> <td align="left"><a href="../types"><span class="tag str"></span></a></td> </tr> </tbody> </table>''',
	'https://api.tabletopsimulator.com/event/#onscriptingbuttonup':\
		'''<h3 id="onscriptingbuttonup">onScriptingButtonUp(...)<a class="headerlink" href="#onscriptingbuttonup" title="Permanent link"> </a></h3> <p>Called when a scripting button (numpad by default) is released. The index range that is returned is 1-10.</p> <div class="admonition info"> <p class="admonition-title">onScriptingButtonUp(index, player_color)</p> <ul> <li><a href="../types"><span class="tag int"></span></a> <strong>index</strong>: Index number, representing which key was released.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the player who triggered the function.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/counter/#setvalue':\
		'''<td><a class="anchor" id="setvalue"></a>setValue()</td> <td>Sets the current value of the Counter. This function acts the same as <a href="../object#setvalue">Object's setValue()</a>.</td> <td align="right"><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/event/#oncollisionexit':\
		'''<h3 id="oncollisionexit">onCollisionExit(...)<a class="headerlink" href="#oncollisionexit" title="Permanent link"> </a></h3> <p>This function is called when an Object stops colliding with the Object the function is on. Does not work in Global.</p> <div class="admonition info"> <p class="admonition-title">onCollisionExit(collision_info)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>collision_info</strong>: A Table containing data on colliding object.<ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>collision_info.<em>collision_object</em></strong>: Object leaving contact with <code class="codehilite">self</code>.</li> <li><a href="../types"><span class="tag tab"></span></a> <strong>collision_info.<em>contact_points</em></strong>: Sub-table full of the Vectors where contact last broke off.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>collision_info.<em>relative_velocity</em></strong>: Direction and magnitude of the departing Object.</li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#getname':\
		'''<td><a class="anchor" id="getname"></a>getName()</td> <td>Name, also shows as part of Object's tooltip.</td> <td><a href="../types"><span class="ret str"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/base/#print':\
		'''<h4 id="print">print(...)<a class="headerlink" href="#print" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret nil"></span></a> Print a string into chat that only the host is able to see. Used for debugging scripts.</p> <div class="admonition info"> <p class="admonition-title">print(message)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>message</strong>: Text to print into the chat log.</li> </ul> </div> <hr/>''',
	'https://api.tabletopsimulator.com/event/#onobjectsearchend':\
		'''<h3 id="onobjectsearchend">onObjectSearchEnd(...)<a class="headerlink" href="#onobjectsearchend" title="Permanent link"> </a></h3> <p>Called when a search is finished on any container.</p> <div class="admonition info"> <p class="admonition-title">onObjectSearchEnd(obj, player_color)</p> </div> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>obj</strong>: The Object which was searched.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the player who triggered the function.</li> </ul>''',
	'https://api.tabletopsimulator.com/ui/#getvalue':\
		'''<h3 id="getvalue">getValue(...)<a class="headerlink" href="#getvalue" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret str"></span></a> Obtains the value between elements tags, like: <code class="codehilite"><span class="nt">&lt;Text&gt;</span>ValueObtained<span class="nt">&lt;/Text&gt;</span></code></p> <div class="admonition info"> <p class="admonition-title">getValue(id)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>id</strong>: The Id that was assigned, as an attribute, to the desired XML UI element.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/ui/#setattribute':\
		'''<h3 id="setattribute">setAttribute(...)<a class="headerlink" href="#setattribute" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret boo"></span></a> Sets the value of a specified attribute of a UI element.</p> <div class="admonition important"> <p class="admonition-title">Important</p> <p>This will override the run-time value from the XML UI for all players, forcing them to see the same value.</p> </div> <div class="admonition info"> <p class="admonition-title">setAttribute(id, attribute, value)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>id</strong>: The Id that was assigned, as an attribute, to the desired XML UI element.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>attribute</strong>: The name of the attribute you want to set the value of.</li> <li><a href="../types"><span class="tag var"></span></a> <strong>value</strong>: The value to set for the attribute.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/event/#oncollisionstay':\
		'''<h3 id="oncollisionstay">onCollisionStay(...)<a class="headerlink" href="#oncollisionstay" title="Permanent link"> </a></h3> <p>This function is called <strong>every frame</strong> that an Object is colliding with the Object this function is on. Does not work in Global.</p> <div class="admonition warning"> <p class="admonition-title">Warning</p> <p>This is a very expensive function and can easily slow/crash your game if misused. Use with caution.</p> </div> <div class="admonition info"> <p class="admonition-title">onCollisionExit(collision_info)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>collision_info</strong>: A Table containing data on colliding object.<ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>collision_info.<em>collision_object</em></strong>: Object coming into contact with <code class="codehilite">self</code>.</li> <li><a href="../types"><span class="tag tab"></span></a> <strong>collision_info.<em>contact_points</em></strong>: Sub-table full of the Vectors where contact is taking place.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>collision_info.<em>relative_velocity</em></strong>: Direction and magnitude of the Object, currently.</li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#getluascript':\
		'''<td><a class="anchor" id="getluascript"></a>getLuaScript()</td> <td>Get a Lua script as a string.</td> <td><a href="../types"><span class="ret str"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/player/#print':\
		'''<h4 id="print">print(...)<a class="headerlink" href="#print" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Prints a message into the Player's game chat.</p> <div class="admonition info"> <p class="admonition-title">print(message, message_color)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>message</strong>: The text to be displayed.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>message_color</strong>: Color for the message text to be tinted.<ul> <li><span class="critic comment">Optional, defaults to {r=1, g=1, b=1}.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#angular_drag':\
		'''<td><a class="anchor" id="angular_drag"></a>angular_drag</td> <td>Angular drag. <a href="https://docs.unity3d.com/Manual/class-Rigidbody.html">Unity rigidbody property</a>.</td> <td align="left"><a href="../types"><span class="tag flo"></span></a> <a class="anchor" id="angular_drag"></a></td>''',
	'https://api.tabletopsimulator.com/object/#grid_projection':\
		'''<td><a class="anchor" id="grid_projection"></a>grid_projection</td> <td>If grid lines can appear on the Object if visible grids are turned on.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#sticky':\
		'''<td><a class="anchor" id="sticky"></a>sticky</td> <td>If other Objects on top of this one are also picked up when this Object is.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#randomize':\
		'''<td><a class="anchor" id="randomize"></a>randomize()</td> <td>Shuffles deck/bag, rolls dice/coin, lifts other objects into the air. Same as pressing <code class="codehilite">R</code> by default.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#setpositionsmooth':\
		'''<h4 id="setpositionsmooth">setPositionSmooth(...)<a class="headerlink" href="#setpositionsmooth" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Moves the Object smoothly to the given Vector.</p> <div class="admonition info"> <p class="admonition-title">setPositionSmooth(vector, collide, fast)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>Vector</strong>: A positional Vector.</li> <li><a href="../types"><span class="tag boo"></span></a> <strong>collide</strong>: If the Object will collide with other Objects while moving.</li> <li><a href="../types"><span class="tag boo"></span></a> <strong>fast</strong>: If the Object is moved quickly.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/base/#printtoall':\
		'''<h4 id="printtoall">printToAll(...)<a class="headerlink" href="#printtoall" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Print a message into the in-game chat of all connected players.</p> <div class="admonition info"> <p class="admonition-title">printToAll(message, message_tint)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>message</strong>: Message to place into players' in-game chats.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>message_tint</strong>: RGB values for the text's color tint.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/event/#onplayerconnect':\
		'''<h3 id="onplayerconnect">onPlayerConnect(...)<a class="headerlink" href="#onplayerconnect" title="Permanent link"> </a></h3> <p>Called when a <a href="../player">Player</a> connects to a game.</p> <div class="admonition info"> <p class="admonition-title">onPlayerConnect(person)"</p> <ul> <li><a href="../types"><span class="tag pla"></span></a> <strong>person</strong>: Player reference to who connected.</li> </ul> </div> <hr/>''',
	'https://api.tabletopsimulator.com/event/#ondestroy':\
		'''<h3 id="ondestroy">onDestroy()<a class="headerlink" href="#ondestroy" title="Permanent link"> </a></h3> <p>This function is called when an <a href="../object">Object</a> it is on is destroyed. When <code class="codehilite">onDestroy()</code> is called, the Object has one frame left to live but its recommended to avoid using it as a reference here. This event fires immediately after <a href="#onobjectdestroy">onObjectDestroy()</a> but their lifetime is the same final frame. Does not work in Global.</p>''',
	'https://api.tabletopsimulator.com/object/#getcustomobject':\
		'''<h4 id="getcustomobject">getCustomObject()<a class="headerlink" href="#getcustomobject" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Table with the Custom Object information of a Custom Object. See the <a href="../spawnableobjects">Spawnable Objects</a> page for the kind of information returned.</p> <div class="codehilite"><pre><span></span><span class="c1">-- Example returned Table for a custom token</span> <span class="p">{</span> <span class="n">image</span> <span class="o">=</span> <span class="s2">"SOME URL HERE"</span><span class="p">,</span> <span class="n">thickness</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span> <span class="n">merge_distance</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span> <span class="n">stackable</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span> <span class="p">}</span> </pre></div>''',
	'https://api.tabletopsimulator.com/object/#removebutton':\
		'''<h4 id="removebutton">removeButton(...)<a class="headerlink" href="#removebutton" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Removes a specific button. Indexes start at 0. The first button on any given Object has an index of 0, the next button on it has an index of 1, etc. Each Object has its own indexes.</p> <p>Removing an index instantly causes all other higher indexes to shift down 1.</p> <div class="admonition info"> <p class="admonition-title">removeButton(index)</p> <ul> <li><a href="../types"><span class="tag int"></span></a> <strong>index</strong>: Button index to remove.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/lighting/#apply':\
		'''<td><a class="anchor" id="apply"></a>apply()</td> <td>Applies changes made to the lighting Class using these functions or member variables.</td> <td align="right"><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/player/#getavailablecolors':\
		'''<td><a class="anchor" id="getavailablecolors"></a>getAvailableColors()</td> <td>Returns a table of strings of every valid seat color at the current table. Returned colors are in the default order.</td> <td><a href="../types"><span class="ret tab"></span></a></td> <td align="right"></td>''',
	'https://api.tabletopsimulator.com/event/#onobjectpeek':\
		'''<h3 id="onobjectpeek">onObjectPeek(...)<a class="headerlink" href="#onobjectpeek" title="Permanent link"> </a></h3> <p>Called when a player using peek to look under an Object.</p> <div class="admonition info"> <p class="admonition-title">onObjectPeek(object, player)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>object</strong>: A reference to the Object which was peeked at.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>player</strong>: Name of the <a href="../player-color">Player Color</a> that peeked.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/ui/#setvalue':\
		'''<h3 id="setvalue">setValue(...)<a class="headerlink" href="#setvalue" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret boo"></span></a> Updates the value between elements tags, like: <code class="codehilite"><span class="nt">&lt;Text&gt;</span>ValueChanged<span class="nt">&lt;/Text&gt;</span></code></p> <div class="admonition info"> <p class="admonition-title">setValue(id, value)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>id</strong>: The Id that was assigned, as an attribute, to the desired XML UI element.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>value</strong>: The value to put between the element tags.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#use_gravity':\
		'''<td><a class="anchor" id="use_gravity"></a>use_gravity</td> <td>If gravity affects this object.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/player/#getholdingobjects':\
		'''<td><a class="anchor" id="getholdingobjects"></a>getHoldingObjects()</td> <td>Objects a Player is holding in their hand.</td> <td><a href="../types"><span class="ret tab"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#setrotation':\
		'''<td><a class="anchor" id="setrotation"></a>setRotation(<a href="../types#vector"><span class="tag vec"></span></a> vector)</td> <td>Instantly rotates an Object to the given Vector.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/webrequest/#post':\
		'''<h3 id="post">post(...)<a class="headerlink" href="#post" title="Permanent link"> </a></h3> <p>Post the form to the URL.</p> <div class="admonition info"> <p class="admonition-title">post(url, form, callback_function)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>url</strong>: The url to pull post to.</li> <li><a href="../types"><span class="tag tab"></span></a> <strong>form</strong>: The form of data to post. </li> <li><a href="../types#function"><span class="tag fun"></span></a> <strong>callback_function</strong>: The function that will be triggered<ul> <li><span class="critic comment">Optional, but you will get no data back from the get if it isn't used.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#setstate':\
		'''<td><a class="anchor" id="setstate"></a>setState(<a href="../types"><span class="tag int"></span></a> state_id)</td> <td>Sets <a href="http://berserk-games.com/knowledgebase/creating-states/">state</a> of an Object. State ids (indexes) start at 1.</td> <td><a href="../types"><span class="ret obj"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#interactable':\
		'''<td><a class="anchor" id="interactable"></a>interactable</td> <td>If an object can be interacted with by Players. Other object will still be able to interact with it.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/texttool/#getfontsize':\
		'''<td><a class="anchor" id="getfontsize"></a>getFontSize()</td> <td>Returns Int of the font size.</td> <td><a href="../types"><span class="ret int"></span></a></td>''',
	'https://api.tabletopsimulator.com/event/#onpeek':\
		'''<h3 id="onpeek">onPeek(...)<a class="headerlink" href="#onpeek" title="Permanent link"> </a></h3> <p>Called when a player using peek to look under an Object.</p> <div class="admonition info"> <p class="admonition-title">onPeek(player)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>player</strong>: Name of the <a href="../player-color">Player Color</a> that peeked.</li> </ul> </div> <div class="codehilite"><pre><span></span><span class="kr">function</span> <span class="nf">onPeek</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="n">printToAll</span><span class="p">(</span><span class="n">color</span> <span class="o">..</span> <span class="s2">" peeked at an Object."</span><span class="p">,</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">})</span> <span class="kr">end</span> </pre></div>''',
	'https://api.tabletopsimulator.com/object/#getinputs':\
		'''<h4 id="getinputs">getInputs()<a class="headerlink" href="#getinputs" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Table of all inputs on this Object. The Table contains parameters tables with the same keys as seen in the <a href="#createinput">createInput</a> section, except each Table of parameters also contains an <strong>index</strong> entry. This is used to identify each input, used by <a href="#editinput">editInput</a> and <a href="#removeinput">removeInput</a>.</p>''',
	'https://api.tabletopsimulator.com/object/#setvar':\
		'''<td><a class="anchor" id="setvar"></a>setVar(<a href="../types"><span class="tag str"></span></a> func_name, <a href="../types"><span class="tag var"></span></a> data)</td> <td>Creates/updates a variable in another Object's script. Cannot set a table.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/texttool/#getfontcolor':\
		'''<td><a class="anchor" id="getfontcolor"></a>getFontColor()</td> <td>Returns Table of font Color.</td> <td><a href="../types#color"><span class="ret col"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#takeobject':\
		'''<h4 id="takeobject">takeObject(...)<a class="headerlink" href="#takeobject" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret obj"></span></a> Takes an object from a container (bag/deck/chip stack) and places it in the world.</p> <div class="admonition tip"> <p class="admonition-title">Tip</p> <p>Spawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. It is also possible to add a delay using a <a href="../wait">Wait</a> function instead.</p> </div>''',
	'https://api.tabletopsimulator.com/lighting/#setambientskycolor':\
		'''<td><a class="anchor" id="setambientskycolor"></a>setAmbientSkyColor(<a href="../types#color"><span class="tag col"></span></a> tint)</td> <td>Sets the color of the gradient sky. Not used if <code class="codehilite">ambient_type = 1</code>.</td> <td align="right"><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#getvalue':\
		'''<h4 id="getvalue">getValue()<a class="headerlink" href="#getvalue" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret int"></span></a> Gets a value. What the value represents depends on what type of Object this function is used on.</p> <table> <thead> <tr> <th>Object</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td><a href="../clock">Clock</a></td> <td>Returns Int of stopwatch/timer current time <em>(in seconds)</em>.</td> </tr> <tr> <td><a href="../clock">Counter</a></td> <td>Returns Int of counter value.</td> </tr> <tr> <td>Rotation Value</td> <td>Returns Int of the face-up value. For objects with rotation values set using <a href="#setrotationvalues">setRotationValues</a> this is an index into the table of rotation values.</td> </tr> <tr> <td>Hidden Zone</td> <td>Returns String of the Player <a href="../color">Color</a> of the zone.</td> </tr> <tr> <td>Poker Chip</td> <td>Returns Int of the face value. <span class="critic comment">Does not work on custom chips.</span></td> </tr> <tr> <td>Tablet</td> <td>Returns String of the current URL.</td> </tr> </tbody> </table>''',
	'https://api.tabletopsimulator.com/ui/#hide':\
		'''<h3 id="hide">hide(...)<a class="headerlink" href="#hide" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret boo"></span></a> Hides the given UI element. Unlike the "active" attribute, hide triggers animations.</p> <div class="admonition info"> <p class="admonition-title">hide(id)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>id</strong>: The Id that was assigned, as an attribute, to the desired XML UI element.</li> </ul> </div> <div class="codehilite"><pre><span></span><span class="n">self</span><span class="p">.</span><span class="n">UI</span><span class="p">.</span><span class="n">hide</span><span class="p">(</span><span class="s2">"testElement"</span><span class="p">)</span> </pre></div>''',
	'https://api.tabletopsimulator.com/player/#color':\
		'''<td><a class="anchor" id="color"></a>color</td> <td>The player's <a href="../player-color">Player Color</a>. Read only.</td> <td align="left"><a href="../types"><span class="tag str"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#putobject':\
		'''<h4 id="putobject">putObject(...)<a class="headerlink" href="#putobject" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret obj"></span></a> Places an object into a container (chip stacks/bags/decks). If neither Object is a container, but they are able to be combined (like with 2 cards), then they form a deck/stack.</p> <div class="admonition info"> <p class="admonition-title">putObject(put_object)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>put_object</strong>: An Object to place into the container.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#settable':\
		'''<td><a class="anchor" id="settable"></a>setTable(<a href="../types"><span class="tag str"></span></a> func_name, <a href="../types"><span class="tag tab"></span></a> data)</td> <td>Creates/updates a variable in another Object's script. Only used for tables.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/physics/#getgravity':\
		'''<td><a class="anchor" id="getgravity"></a>getGravity()</td> <td>Returns directional Vector of the direction gravity is pulling.</td> <td><a href="../types#vector"><span class="ret vec"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/base/#clearpixelpaint':\
		'''<td><a class="anchor" id="clearpixelpaint"></a>clearPixelPaint()</td> <td>Remove pixel paint from the instance.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#removeinput':\
		'''<h4 id="removeinput">removeInput(...)<a class="headerlink" href="#removeinput" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Removes a specific input. Indexes start at 0. The first input on any given Object has an index of 0, the next input on it has an index of 1, etc. Each Object has its own indexes.</p> <p>Removing an index instantly causes all other higher indexes to shift down 1.</p> <div class="admonition info"> <p class="admonition-title">removeInput(index)</p> <ul> <li><a href="../types"><span class="tag int"></span></a> <strong>index</strong>: Input index to remove.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/player/#kick':\
		'''<td><a class="anchor" id="kick"></a>kick()</td> <td>Kicks Player out of the room.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#setcolortint':\
		'''<td><a class="anchor" id="setcolortint"></a>setColorTint(<a href="../types#color"><span class="tag col"></span></a> Color)</td> <td>Sets the Color tint.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#setrotationvalues':\
		'''<h4 id="setrotationvalues">setRotationValues(...)<a class="headerlink" href="#setrotationvalues" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Sets rotation values of an object. Rotation values are used to give value to different rotations (like dice). It works by checking all of the rotation values assigned to an object and determining which one of them is closest to pointing up, and then displaying the value associated with that rotation.</p> <div class="admonition info"> <p class="admonition-title">setRotationValues(rotation_values)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>rotation_values</strong>: A Table containing Tables with the following values. 1 sub-Table per "face".<ul> <li><a href="../types"><span class="tag var"></span></a> <strong>rotation_values.value</strong>: What value is associated with a given rotation. Often a String or Int.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>rotation_values.rotation</strong>: The rotation Vector of the Object that best represents the given value pointing up.</li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#addtorque':\
		'''<h4 id="addtorque">addTorque(...)<a class="headerlink" href="#addtorque" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Adds torque to an object in a rotational Vector.</p> <div class="admonition info"> <p class="admonition-title">addTorque(vector, force_type)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>Vector</strong>: A Vector of the direction and magnitude of rotational force.</li> <li><a href="../types"><span class="tag int"></span></a> <strong>Force Type</strong>: An Int representing the force type to apply. Options below.<ul> <li><span class="critic comment">Optional, defaults to 3.</span></li> <li><strong>1</strong>: Continuous force, uses mass. <em>(Force)</em></li> <li><strong>2</strong>: Continuous acceleration, ignores mass. <em>(Acceleration)</em></li> <li><strong>3</strong>: Instant force impulse, uses mass. <em>(Impulse)</em></li> <li><strong>4</strong>: Instant velocity change, ignores mass. <em>(Velocity Change)</em></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/clock/#setvalue':\
		'''<h3 id="setvalue">setValue(...)<a class="headerlink" href="#setvalue" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret boo"></span></a> Set the timer to display a number of seconds. This function acts the same as <a href="../object#setvalue">Object's setValue()</a>. If the Clock is not in timer mode, it will be switched. If it is in timer mode, it will be paused and the remaining time will be changed. This will not start the countdown on its own.</p> <div class="admonition info"> <p class="admonition-title">setValue(seconds)</p> <ul> <li><a href="../types"><span class="tag int"></span></a> <strong>seconds</strong>: How many seconds will be counted down.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/player/#mute':\
		'''<td><a class="anchor" id="mute"></a>mute()</td> <td>Mutes or unmutes Player, preventing/allowing voice chat.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#use_grid':\
		'''<td><a class="anchor" id="use_grid"></a>use_grid</td> <td>If snapping to grid is enabled or not.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#getboundsnormalized':\
		'''<h4 id="getboundsnormalized">getBoundsNormalized()<a class="headerlink" href="#getboundsnormalized" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Table of Vector information describing the size of an object in Global terms, as if it was rotated to {0,0,0}. <a href="https://docs.unity3d.com/ScriptReference/Bounds.html">Bounds</a> are part of Unity, and represent an imaginary square box that can be drawn around an object. Unlike scale, it can help indicate the size of an object in in-game units, not just relative model size.</p>''',
	'https://api.tabletopsimulator.com/object/#loading_custom':\
		'''<td><a class="anchor" id="loading_custom"></a>loading_custom</td> <td>If the Object's custom elements (images/models/etc) are loading. Read only.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/lighting/#setambientgroundcolor':\
		'''<td><a class="anchor" id="setambientgroundcolor"></a>setAmbientGroundColor(<a href="../types#color"><span class="tag col"></span></a> tint)</td> <td>Sets the color of the gradient ground. Not used if <code class="codehilite">ambient_type = 1</code>.</td> <td align="right"><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#setvalue':\
		'''<h4 id="setvalue">setValue(...)<a class="headerlink" href="#setvalue" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Sets a value on an Object. What the value represents depends on what type of Object it is.</p> <table> <thead> <tr> <th>Object</th> <th>Value</th> </tr> </thead> <tbody> <tr> <td><a href="../clock">Clock</a></td> <td>Set Int for stopwatch/timer current time <em>(in seconds)</em>.</td> </tr> <tr> <td><a href="../clock">Counter</a></td> <td>Set Int for counter value.</td> </tr> <tr> <td>Rotation Value</td> <td>Set Int for the face-up value. For objects with rotation values set with <a href="#setrotationvalues">setRotationValues</a> this is an index into the table of rotation values.</td> </tr> <tr> <td>Hidden Zone</td> <td>Set String for the Player <a href="../color">Color</a> of the zone.</td> </tr> <tr> <td>Tablet</td> <td>Set String for the current URL.</td> </tr> </tbody> </table>''',
	'https://api.tabletopsimulator.com/event/#onobjectenterscriptingzone':\
		'''<h3 id="onobjectenterscriptingzone">onObjectEnterScriptingZone(...)<a class="headerlink" href="#onobjectenterscriptingzone" title="Permanent link"> </a></h3> <p>Called when any object enters any scripting zone.</p> <div class="admonition info"> <p class="admonition-title">onObjectEnterScriptingZone(zone, enter_object)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>zone</strong>: The Object of the scripting zone.</li> <li><a href="../types"><span class="tag obj"></span></a> <strong>enter_object</strong>: The Object triggering the function.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/event/#ondrop':\
		'''<h3 id="ondrop">onDrop(...)<a class="headerlink" href="#ondrop" title="Permanent link"> </a></h3> <p>This function is called when this <a href="../object">Object</a> is dropped. Does not work in Global.</p> <div class="admonition info"> <p class="admonition-title">onDrop(player_color)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the Player.</li> </ul> </div> <div class="codehilite"><pre><span></span><span class="kr">function</span> <span class="nf">onDrop</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="nb">print</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="kr">end</span> </pre></div>''',
	'https://api.tabletopsimulator.com/ui/#getattribute':\
		'''<h3 id="getattribute">getAttribute(...)<a class="headerlink" href="#getattribute" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret var"></span></a> Obtains the value of a specified attribute of a UI element. What it returns will typically be a string or a number.</p> <div class="admonition info"> <p class="admonition-title">getAttribute(id, attribute)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>id</strong>: The Id that was assigned, as an attribute, to the desired XML UI element.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>attribute</strong>: The name of the attribute you wish to get the value of.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/rpgfigurine/#changemode':\
		'''<td><a class="anchor" id="changemode"></a>changeMode()</td> <td>Changes the figurine's current mode. What the mode represents is based on the figurine.</td> <td><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#name':\
		'''<td><a class="anchor" id="name"></a>name</td> <td>The Object's name. Read only, use <code class="codehilite">setName("")</code> to write to it.</td> <td align="left"><a href="../types"><span class="tag str"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#texttool':\
		'''<td><a class="anchor" id="texttool"></a>TextTool</td> <td>A <a href="../texttool">TextTool</a>, which is an in-game text display system.</td>''',
	'https://api.tabletopsimulator.com/json/#encode_pretty':\
		'''<h3 id="encode_pretty">encode_pretty(...)<a class="headerlink" href="#encode_pretty" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret str"></span></a> Encodes data from a number, string or Table into a JSON string. This version is slightly less efficient but is easier to read.</p> <div class="admonition info"> <p class="admonition-title">encode_pretty(data)</p> <ul> <li><a href="../types"><span class="tag var"></span></a> <strong>data</strong>: A Var, either String, Int, Float or Table, to encode as a string.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/lighting/#ambient_intensity':\
		'''<td><a class="anchor" id="ambient_intensity"></a>ambient_intensity</td> <td>The strength of the ambient light. Range = 0 to 4.</td> <td align="left"><a href="../types"><span class="tag flo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#script_state':\
		'''<td><a class="anchor" id="script_state"></a>script_state</td> <td>The saved data on the object. See <a href="../event#onsave">onSave()</a>.</td> <td align="left"><a href="../types"><span class="tag str"></span></a></td>''',
	'https://api.tabletopsimulator.com/base/#spawnobject':\
		'''<h4 id="spawnobject">spawnObject(...)<a class="headerlink" href="#spawnobject" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret obj"></span></a> Spawn an Object. View the <a href="../spawnableobjects">Spawnable Objects</a> page for Objects that can be spawned.</p> <p>If you are spawning a <strong>custom Object</strong>, you should call <a href="../object#setcustomobject">setCustomObject</a> immediately after spawnObject to set its custom properties.</p> <div class="admonition tip"> <p class="admonition-title">Tip</p> <p>Spawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. You can also add a delay after spawning using a <a href="../wait">Wait</a> function.</p> </div>''',
	'https://api.tabletopsimulator.com/event/#oncollisionenter':\
		'''<h3 id="oncollisionenter">onCollisionEnter(...)<a class="headerlink" href="#oncollisionenter" title="Permanent link"> </a></h3> <p>This function is called when an Object starts colliding with the Object the function is on. Does not work in Global.</p> <div class="admonition info"> <p class="admonition-title">onCollisionEnter(collision_info)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>collision_info</strong>: A Table containing data on colliding object.<ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>collision_info.<em>collision_object</em></strong>: Object coming into contact with <code class="codehilite">self</code>.</li> <li><a href="../types"><span class="tag tab"></span></a> <strong>collision_info.<em>contact_points</em></strong>: Sub-table full of the Vectors where contact took place.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>collision_info.<em>relative_velocity</em></strong>: Direction and magnitude at the time of collision.</li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#deal':\
		'''<h4 id="deal">deal(...)<a class="headerlink" href="#deal" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Deals Objects to hand zones. Will deal from decks/bags/stacks as well as individual items. If dealing an individual item to a hand zone, it is a good idea to make sure that its <a href="#member-variables">Member Variable</a> for <code class="codehilite">use_hands</code> is <code class="codehilite">true</code>.</p> <div class="admonition info"> <p class="admonition-title">deal(number, player_color, index)</p> <ul> <li><a href="../types"><span class="tag int"></span></a> <strong>number</strong>: How many to deal.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: The <a href="../player-color">Player Color</a> to deal to.<ul> <li><span class="critic comment">Optional, defaults to an empty string. If not supplied, it will attempt to deal to all seated players.</span></li> </ul> </li> <li><a href="../types"><span class="tag int"></span></a> <strong>index</strong>: Index of hand zone to deal to.<ul> <li><span class="critic comment">Optional, defaults to the first created hand zone.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#scale':\
		'''<h4 id="scale">scale(...)<a class="headerlink" href="#scale" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Scales Object by a multiple. This does not set the Object to a specific scale, it scales the Object by the given multiple.</p> <div class="admonition info"> <p class="admonition-title">scale(scale)</p> <ul> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>scale</strong>: Multiplier for scale.<ul> <li><span class="critic comment">{x=1, y=1, z=1} would not change the scale.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/base/#startluacoroutine':\
		'''<h4 id="startluacoroutine">startLuaCoroutine(...)<a class="headerlink" href="#startluacoroutine" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret obj"></span></a> Start a coroutine. A coroutine is similar to a function, but has the unique ability to have its run paused until the next frame of the game using <code class="codehilite">coroutine.yield(0)</code>.</p> <div class="admonition attention"> <p class="admonition-title">Attention</p> <p>You MUST return a 1 at the end of any coroutine or it will throw an error.</p> </div>''',
	'https://api.tabletopsimulator.com/physics/#cast':\
		'''<h3 id="cast">cast(...)<a class="headerlink" href="#cast" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret tab"></span></a> Returns Table containing information on hit Objects. There are three kinds of casts:</p> <table> <thead> <tr> <th>Type</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>Ray</td> <td>A line.</td> </tr> <tr> <td>Box</td> <td>A cube, rectangle, plane.</td> </tr> <tr> <td>Sphere</td> <td>A round ball. You cannot make ovals.</td> </tr> </tbody> </table>''',
	'https://api.tabletopsimulator.com/event/#onload':\
		'''<h3 id="onload">onLoad(...)<a class="headerlink" href="#onload" title="Permanent link"> </a></h3> <p>This function is called when a game save is finished loading every Object. This is where most setup code will go. The fast-forward and rewind feature will also cause this function to activate. If this function is in an Object's script and that Object is spawned, like by removing it from a container, it too will trigger onLoad().</p> <div class="admonition info"> <p class="admonition-title">onLoad(save_state)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>save_state</strong>: The encoded string containing any save_state (saved) data.<ul> <li><span class="critic comment">If there is no data saved, this returns an empty String.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#roll':\
		'''<td><a class="anchor" id="roll"></a>roll()</td> <td>Rolls dice/coins.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#editinput':\
		'''<h4 id="editinput">editInput(...)<a class="headerlink" href="#editinput" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Modify an existing input. The only parameter that is required is the index. The rest are optional, and not using them will cause the edited input's element to remain. Indexes start at 0. The first input on any given Object has an index of 0, the next input on it has an index of 1, etc. Each Object has its own indexes.</p> <div class="admonition info"> <p class="admonition-title">editInput(parameters)</p> <p><em>All fields besides <code class="codehilite">index</code> are optional. If not used, the element will default to the element's current setting.</em></p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>parameters</strong>: A Table containing the information used to spawn the input.<ul> <li><a href="../types"><span class="tag int"></span></a> <strong>parameters.index</strong>: Index of the input you want to edit.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>parameters.input_function</strong>: The function's name that will be run when the input is selected.</li> <li><a href="../types"><span class="tag obj"></span></a> <strong>parameters.function_owner</strong>: The Object which contains the input_function function.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>parameters.label</strong>: Text that appears as greyed out text when there is no value in the input.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.position</strong>: Where the input appears, relative to the Object's center.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.rotation</strong>: How the input is rotated, relative to the Object's rotation.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.scale</strong>: Scale of the input, relative to the Object's scale.</li> <li><a href="../types"><span class="tag flo"></span></a> <strong>parameters.width</strong>: How wide the input will be, relative to the Object.</li> <li><a href="../types"><span class="tag flo"></span></a> <strong>parameters.height</strong>: How tall the input will be, relative to the Object.</li> <li><a href="../types"><span class="tag flo"></span></a> <strong>parameters.font_size</strong>: Size the label/value font will be, relative to the Object.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>parameters.color</strong>: A Color for the input's background.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>parameters.font_color</strong>: A Color for the value text.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>parameters.tooltip</strong>: A popup of text, similar to how an Object's name is displayed on mouseover.</li> <li><a href="../types"><span class="tag int"></span></a> <strong>parameters.alignment</strong>: How text is aligned in the input box.<ul> <li><strong>1</strong>: Automatic</li> <li><strong>2</strong>: Left</li> <li><strong>3</strong>: Center</li> <li><strong>4</strong>: Right</li> <li><strong>5</strong>: Justified</li> </ul> </li> <li><a href="../types"><span class="tag str"></span></a> <strong>parameters.value</strong>: A String of the text entered into the input.</li> <li><a href="../types"><span class="tag int"></span></a> <strong>parameters.validation</strong>: An Int which determines what characters can be input into the value.<ul> <li><strong>1</strong>: None</li> <li><strong>2</strong>: Integer</li> <li><strong>3</strong>: Float</li> <li><strong>4</strong>: Alphanumeric</li> <li><strong>5</strong>: Username</li> <li><strong>6</strong>: Name</li> </ul> </li> <li><a href="../types"><span class="tag int"></span></a> <strong>parameters.tab</strong>: An Int which determines how pressing tab is handled when inputting.<ul> <li><strong>1</strong>: None</li> <li><strong>2</strong>: Select Next Input</li> <li><strong>3</strong>: Indent</li> </ul> </li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#reset':\
		'''<td><a class="anchor" id="reset"></a>reset()</td> <td>Resets this Object. Resetting a Deck brings all the Cards back into it. Resetting a Bag clears its contents (works for both Loot and Infinite Bags).</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#dealtocolorwithoffset':\
		'''<h4 id="dealtocolorwithoffset">dealToColorWithOffset(...)<a class="headerlink" href="#dealtocolorwithoffset" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret obj"></span></a> Deals from a deck to a position relative to the hand zone.</p> <div class="admonition info"> <p class="admonition-title">dealToColorWithOffset(offset, flip, player_color)</p> <ul> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>offset</strong>: The x/y/z offset to deal to around the given hand zone.</li> <li><a href="../types"><span class="tag boo"></span></a> <strong>flip</strong>: If the card is flipped over when dealt.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: Hand zone <a href="../player-color">Player Color</a> to offset dealing to.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#clearbuttons':\
		'''<td><a class="anchor" id="clearbuttons"></a>clearButtons()</td> <td>Removes all scripted buttons.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#setcustomobject':\
		'''<h4 id="setcustomobject">setCustomObject(...)<a class="headerlink" href="#setcustomobject" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Sets a custom Object's properties. It can be used after <a href="../base#spawnobject">spawnObject</a> or on an already existing custom Object. If used on an already existing custom Object, you must use <a href="#reload">reload</a> on the object after setCustomObject for the changes to be displayed.</p> <div class="admonition info"> <p class="admonition-title">setCustomObject(parameters)</p> <p>The Table of parameters varies, depending on which type of custom Object it is. See the <a href="../spawnableobjects">Spawnable Object</a> page for the parameters needed.</p> </div>''',
	'https://api.tabletopsimulator.com/object/#static_friction':\
		'''<td><a class="anchor" id="static_friction"></a>static_friction</td> <td>Static friction, value of 0-1. <a href="https://docs.unity3d.com/Manual/class-PhysicMaterial.html">Unity physics material</a>.</td> <td align="left"><a href="../types"><span class="tag flo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#script_code':\
		'''<td><a class="anchor" id="script_code"></a>script_code</td> <td>The Lua Script on the Object.</td> <td align="left"><a href="../types"><span class="tag str"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#issmoothmoving':\
		'''<td><a class="anchor" id="issmoothmoving"></a>isSmoothMoving()</td> <td>Indicates if an object is traveling as part of a Smooth move. Smooth moving is performed by setPositionSmooth and setRotationSmooth.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/player/#getpointerrotation':\
		'''<td><a class="anchor" id="getpointerrotation"></a>getPointerRotation()</td> <td>Player's pointer rotation.</td> <td><a href="../types#vector"><span class="ret vec"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/event/#onobjectspawn':\
		'''<h3 id="onobjectspawn">onObjectSpawn(...)<a class="headerlink" href="#onobjectspawn" title="Permanent link"> </a></h3> <p>Called when any Object is spawned/created.</p> <div class="admonition info"> <p class="admonition-title">onObjectSpawn(spawn_object)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>spawn_object</strong>: The Object which triggered this function.</li> </ul> </div> <div class="codehilite"><pre><span></span><span class="kr">function</span> <span class="nf">onObjectSpawn</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="nb">print</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="kr">end</span> </pre></div>''',
	'https://api.tabletopsimulator.com/event/#onsearchend':\
		'''<h3 id="onsearchend">onSearchEnd(...)<a class="headerlink" href="#onsearchend" title="Permanent link"> </a></h3> <p>Called when a player first searches this Object.</p> <div class="admonition info"> <p class="admonition-title">onSearchEnd(<a href="../types"><span class="tag str"></span></a> player_color)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the Player.</li> </ul> </div> <hr/>''',
	'https://api.tabletopsimulator.com/object/#getposition':\
		'''<td><a class="anchor" id="getposition"></a>getPosition()</td> <td>Returns a Vector of the current world position.</td> <td><a href="../types#vector"><span class="ret vec"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/event/#onsave':\
		'''<h3 id="onsave">onSave()<a class="headerlink" href="#onsave" title="Permanent link"> </a></h3> <p>Called whenever your game is saved, either manually or by auto-save. It is used to allow information to persist through saving/loading. It allows you to place information into a table that is written into the save file. It works on Global information and can also be used to save information onto an Object.</p> <div class="admonition important"> <p class="admonition-title">Important</p> <p>When using <code class="codehilite">onSave()</code>, information is saved into the save file you are using. Using <em>Save &amp; Apply</em> does NOT cause it to record data, only overwriting your save will update what information <code class="codehilite">onSave()</code> is trying to record.</p> </div>''',
	'https://api.tabletopsimulator.com/object/#getvar':\
		'''<td><a class="anchor" id="getvar"></a>getVar(<a href="../types"><span class="tag str"></span></a> func_name)</td> <td>Data value of a variable in another Object's script. Cannot return a table.</td> <td><a href="../types"><span class="ret var"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/event/#onplayerdisconnect':\
		'''<h3 id="onplayerdisconnect">onPlayerDisconnect(...)<a class="headerlink" href="#onplayerdisconnect" title="Permanent link"> </a></h3> <p>Called when a <a href="../player">Player</a> disconnects from a game.</p> <div class="admonition info"> <p class="admonition-title">onPlayerDisconnect(person)"</p> <ul> <li><a href="../types"><span class="tag pla"></span></a> <strong>person</strong>: Player reference to who disconnected.</li> </ul> </div> <hr/>''',
	'https://api.tabletopsimulator.com/object/#auto_raise':\
		'''<td><a class="anchor" id="auto_raise"></a>auto_raise</td> <td>If an object should be lifted above other objects to avoid collision when held by a player.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#use_snap_points':\
		'''<td><a class="anchor" id="use_snap_points"></a>use_snap_points</td> <td>If snap points are used or ignored.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/event/#onobjectpickup':\
		'''<h3 id="onobjectpickup">onObjectPickUp(...)<a class="headerlink" href="#onobjectpickup" title="Permanent link"> </a></h3> <p>Called whenever a Player picks up an Object.</p> <div class="admonition info"> <p class="admonition-title">onObjectPickUp(player_color, picked_up_object)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the Player who picked up the object.</li> <li><a href="../types"><span class="tag obj"></span></a> <strong>picked_up_object</strong>: The Object in game which was picked up.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#getvelocity':\
		'''<td><a class="anchor" id="getvelocity"></a>getVelocity()</td> <td>Returns a Vector of the current velocity.</td> <td><a href="../types#vector"><span class="ret vec"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#held_by_color':\
		'''<td><a class="anchor" id="held_by_color"></a>held_by_color</td> <td>The Color of the Player that is holding the object.</td> <td align="left"><a href="../types"><span class="tag str"></span></a></td>''',
	'https://api.tabletopsimulator.com/player/#promote':\
		'''<td><a class="anchor" id="promote"></a>promote()</td> <td>Promotes/demotes a Player. Promoted players have access to most host privileges.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#createinput':\
		'''<h4 id="createinput">createInput(...)<a class="headerlink" href="#createinput" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Creates a scripted input attached to the Object. Scripted inputs are boxes you can click inside of in-game to input/edit text. Every letter typed triggers the function. The bool that is returned as part of the input_function allows you to determine when a player has finished editing the input.</p> <details class="tip"><summary>Input Tips</summary><ul><li>Inputs can not be clicked from their back side.</li><li>Inputs can not be clicked if there is another object between the pointer and the inputs. This does not include the Object the input is attached to.</li><li>Inputs are placed relative to the Object they are attached to.</li><li>The maximum font size is capped at 1000.</li><li>The minimum width/height is 60. Any lower number (besides 0) will appear to be 60. This prevents visual glitches involving the corner rounding.</li><li>Font that does not fit in the input window's width/height does NOT display. To know how much height you need for each line, the formula is <code class="codehilite">(font_size * # of lines) + 23</code>. In other words, multiply how many lines of text you want to display by your font_size and add 23. That is your height value.</li><li>You cannot assign an index to an input. It is given one automatically.</li></ul></details>''',
	'https://api.tabletopsimulator.com/base/#fliptable':\
		'''<td><a class="anchor" id="fliptable"></a>flipTable()</td> <td>Flip the table.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#destruct':\
		'''<td><a class="anchor" id="destruct"></a>destruct()</td> <td>Destroys Object. Allows for <code class="codehilite">self.destruct()</code>.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/base/#printtocolor':\
		'''<h4 id="printtocolor">printToColor(...)<a class="headerlink" href="#printtocolor" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Print a message to the in-game chat of a specific player.</p> <div class="admonition info"> <p class="admonition-title">printToColor(message, <a href="../player-color">player_color</a>, message_tint)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>message</strong>: Message to place into the player's in-game chat.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the player that will receive the message.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>message_tint</strong>: RGB values for the text's color tint.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/lighting/#light_intensity':\
		'''<td><a class="anchor" id="light_intensity"></a>light_intensity</td> <td>The strength of the directional light shining down in the scene. Range = 0 to 4.</td> <td align="left"><a href="../types"><span class="tag flo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#positiontolocal':\
		'''<h4 id="positiontolocal">positionToLocal(...)<a class="headerlink" href="#positiontolocal" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Vector after converting a world vector to a local Vector. A world Vector is a positional Vector using the world's coordinate system. A Local Vector is a positional Vector that is relative to the position of the given object.</p> <div class="admonition tip"> <p class="admonition-title">Object Scale</p> <p>This function takes the Object's scale into account, as the Object is the key relative point.</p> </div>''',
	'https://api.tabletopsimulator.com/player/#host':\
		'''<td><a class="anchor" id="host"></a>host</td> <td>If the player is the host. Read only.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#editbutton':\
		'''<h4 id="editbutton">editButton(...)<a class="headerlink" href="#editbutton" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Modify an existing button. The only parameter that is required is the index. The rest are optional, and not using them will cause the edited button's element to remain. Indexes start at 0. The first button on any given Object has an index of 0, the next button on it has an index of 1, etc. Each Object has its own indexes.</p> <div class="admonition info"> <p class="admonition-title">editButton(parameters)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>parameters</strong>: A Table containing the information used to spawn the button.<ul> <li><a href="../types"><span class="tag int"></span></a> <strong>parameters.index</strong>: Index of the button you want to edit.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>parameters.click_function</strong>: Function's name that will be run when button is clicked.</li> <li><a href="../types"><span class="tag obj"></span></a> <strong>parameters.function_owner</strong>: The Object which contains the click_function function.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>parameters.label</strong>: Text that appears on the button.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.position</strong>: Where the button appears, relative to the Object's center.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.rotation</strong>: How the button is rotated, relative to the Object's rotation.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.scale</strong>: Scale of the button, relative to the Object's scale.</li> <li><a href="../types"><span class="tag flo"></span></a> <strong>parameters.width</strong>: How wide the button will be, relative to the Object.</li> <li><a href="../types"><span class="tag flo"></span></a> <strong>parameters.height</strong>: How tall the button will be, relative to the Object.</li> <li><a href="../types"><span class="tag flo"></span></a> <strong>parameters.font_size</strong>: Size the label font will be, relative to the Object.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>parameters.color</strong>: A Color for the clickable button.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>parameters.font_color</strong>: A Color for the label text.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>parameters.hover_color</strong>: A Color for the background during mouse-over.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>parameters.press_color</strong>: A Color for the background when clicked.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>parameters.tooltip</strong>: Text of a popup of text, similar to how an Object's name is displayed on mouseover.</li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#getrotationvalues':\
		'''<h4 id="getrotationvalues">getRotationValues()<a class="headerlink" href="#getrotationvalues" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Table of rotation values. Rotation values are used to give value to different rotations (like dice) based on which side is pointed "up". It works by checking all of the rotation values assigned to an object and determining which one of them is closest to pointing up, and then displaying the value associated with that rotation.</p>''',
	'https://api.tabletopsimulator.com/object/#getcolortint':\
		'''<td><a class="anchor" id="getcolortint"></a>getColorTint()</td> <td>Color tint.</td> <td><a href="../types#color"><span class="ret col"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/event/#onchat':\
		'''<h3 id="onchat">onChat(...)<a class="headerlink" href="#onchat" title="Permanent link"> </a></h3> <p>This function is called when a message is sent through the in-game chat. It does not trigger when global chat messages are sent. Using <code class="codehilite"><span class="kr">return</span> <span class="kc">false</span></code> inside of this function prevents the chat message which triggered it to be suppressed.</p> <div class="admonition info"> <p class="admonition-title">onChat(message, sender)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>message</strong>: Chat message which triggered the function.</li> <li><a href="../types"><span class="tag pla"></span></a> <strong>sender</strong>: Player which sent the chat message.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#getangularvelocity':\
		'''<td><a class="anchor" id="getangularvelocity"></a>getAngularVelocity()</td> <td>Returns a Vector of the current angular velocity.</td> <td><a href="../types#vector"><span class="ret vec"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/event/#onobjectrandomize':\
		'''<h3 id="onobjectrandomize">onObjectRandomize(...)<a class="headerlink" href="#onobjectrandomize" title="Permanent link"> </a></h3> <p>Called when an Object is randomized. Like when shuffling a deck or shaking dice.</p> <div class="admonition info"> <p class="admonition-title">onObjectRandomize(randomize_object, player_color)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>spawn_object</strong>: The Object which triggered this function.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the player who triggered the function.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/clock/#showcurrenttime':\
		'''<td><a class="anchor" id="showcurrenttime"></a>showCurrentTime()</td> <td>Switches clock to display current time. It will clear any stopwatch or timer.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td align="right"></td>''',
	'https://api.tabletopsimulator.com/counter/#increment':\
		'''<td><a class="anchor" id="increment"></a>increment()</td> <td>Increases Counter's value by 1.</td> <td align="right"><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#guid':\
		'''<td><a class="anchor" id="guid"></a>guid</td> <td>The 6 character unique Object identifier within Tabletop Simulator. It is assigned correctly once the <code class="codehilite">spawning</code> member variable becomes false.</td> <td align="left"><a href="../types"><span class="tag str"></span></a></td>''',
	'https://api.tabletopsimulator.com/player/#admin':\
		'''<td><a class="anchor" id="admin"></a>admin</td> <td>If the player is promoted or the host of the game. Read only.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/event/#onpickup':\
		'''<h3 id="onpickup">onPickUp(...)<a class="headerlink" href="#onpickup" title="Permanent link"> </a></h3> <p>Called when a player picks up an Object.</p> <div class="admonition info"> <p class="admonition-title">onPickUp(player_color)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the Player.</li> </ul> </div> <div class="codehilite"><pre><span></span><span class="kr">function</span> <span class="nf">onPickUp</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="nb">print</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="kr">end</span> </pre></div>''',
	'https://api.tabletopsimulator.com/object/#setlock':\
		'''<td><a class="anchor" id="setlock"></a>setLock(<a href="../types"><span class="tag boo"></span></a> lock)</td> <td>Sets if an object is locked in place.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#positiontoworld':\
		'''<h4 id="positiontoworld">positionToWorld(...)<a class="headerlink" href="#positiontoworld" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Vector after converting a local Vector to a world Vector. A world Vector is a positional Vector using the world's coordinate system. A Local Vector is a positional Vector that is relative to the position of the given object.</p> <div class="admonition tip"> <p class="admonition-title">Object Scale</p> <p>This function takes the Object's scale into account, as the Object is the key relative point.</p> </div>''',
	'https://api.tabletopsimulator.com/player/#promoted':\
		'''<td><a class="anchor" id="promoted"></a>promoted</td> <td>If the current player is promoted.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#counter':\
		'''<td><a class="anchor" id="counter"></a>Counter</td> <td>A <a href="../counter">Counter</a>, which is the in-game digital counter.</td>''',
	'https://api.tabletopsimulator.com/lighting/#ambient_type':\
		'''<td><a class="anchor" id="ambient_type"></a>ambient_type</td> <td>The source of ambient light. 1 = background, 2 = gradient.</td> <td align="left"><a href="../types"><span class="tag int"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#resting':\
		'''<td><a class="anchor" id="resting"></a>resting</td> <td>If an Object is at rest. <a href="https://docs.unity3d.com/412/Documentation/Components/RigidbodySleeping.html">Unity rigidbody property</a>.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#call':\
		'''<h4 id="call">call(...)<a class="headerlink" href="#call" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret var"></span></a> Used to call a Lua function on this Object. This is used to remotely call functions in other scripts, either in Global or Object scripts. <code class="codehilite">Global</code> is the "Object" to use to call a function in the Global script.</p> <p><em>Var is only returned if the function called has a <code class="codehilite">return</code>. Otherwise return is <code class="codehilite">nil</code>. See example.</em></p>''',
	'https://api.tabletopsimulator.com/object/#setrotationsmooth':\
		'''<h4 id="setrotationsmooth">setRotationSmooth(...)<a class="headerlink" href="#setrotationsmooth" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Rotates the Object smoothly to the given Vector.</p> <div class="admonition info"> <p class="admonition-title">setRotationSmooth(vector, collide, fast)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>Vector</strong>: A rotational Vector.</li> <li><a href="../types"><span class="tag boo"></span></a> <strong>collide</strong>: If the Object will collide with other Objects while rotating.</li> <li><a href="../types"><span class="tag boo"></span></a> <strong>fast</strong>: If the Object is rotated quickly.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/player/#seated':\
		'''<td><a class="anchor" id="seated"></a>seated</td> <td>If a player is currently seated at this color. Read only.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#bounciness':\
		'''<td><a class="anchor" id="bounciness"></a>bounciness</td> <td>Bounciness, value of 0-1. <a href="https://docs.unity3d.com/Manual/class-PhysicMaterial.html">Unity physics material</a>.</td> <td align="left"><a href="../types"><span class="tag flo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#jointto':\
		'''<h4 id="jointto">jointTo(...)<a class="headerlink" href="#jointto" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Joints objects together, in the same way the Joint tool does.</p> <p><strong>Using obj.jointTo(), with no object or parameter used as arguments, will remove all joints from that Object.</strong></p> <div class="admonition info"> <p class="admonition-title">jointTo(object, parameters)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>object</strong>: The Object that the selected object will be jointed to.</li> <li><a href="../types"><span class="tag tab"></span></a> <strong>parameters</strong>: A table of parameters. Which parameters depends on the joint type. See below for more.</li> <li><span class="critic comment">All parameters have defaults, the same as the Joint Tool.</span></li> </ul> </div>''',
	'https://api.tabletopsimulator.com/player/#blindfolded':\
		'''<td><a class="anchor" id="blindfolded"></a>blindfolded</td> <td>If the player is blindfolded.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/player/#gethandcount':\
		'''<td><a class="anchor" id="gethandcount"></a>getHandCount()</td> <td>Number of <a href="http://berserk-games.com/knowledgebase/hands/">hand zones</a> owned by this color.</td> <td><a href="../types"><span class="ret int"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#gettransformright':\
		'''<h4 id="gettransformright">getTransformRight()<a class="headerlink" href="#gettransformright" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Vector of the forward direction of this object. The direction is relative to how the object is facing.</p> <div class="codehilite"><pre><span></span><span class="c1">-- Example of moving right 5 units</span> <span class="kr">function</span> <span class="nf">onLoad</span><span class="p">()</span> <span class="n">distance</span> <span class="o">=</span> <span class="mi">5</span> <span class="n">pos_target</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">getTransformRight</span><span class="p">()</span> <span class="n">pos_current</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">getPosition</span><span class="p">()</span> <span class="n">pos</span> <span class="o">=</span> <span class="p">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">pos_current</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">pos_target</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">distance</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">pos_current</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">pos_target</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">distance</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="n">pos_current</span><span class="p">.</span><span class="n">z</span> <span class="o">+</span> <span class="n">pos_target</span><span class="p">.</span><span class="n">z</span> <span class="o">*</span> <span class="n">distance</span><span class="p">,</span> <span class="p">}</span> <span class="n">self</span><span class="p">.</span><span class="n">setPositionSmooth</span><span class="p">(</span><span class="n">pos</span><span class="p">)</span> <span class="kr">end</span> </pre></div>''',
	'https://api.tabletopsimulator.com/object/#spawning':\
		'''<td><a class="anchor" id="spawning"></a>spawning</td> <td>If the Object is finished spawning. Read only.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#addforce':\
		'''<h4 id="addforce">addForce(...)<a class="headerlink" href="#addforce" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Adds force to an object in a directional Vector.</p> <div class="admonition info"> <p class="admonition-title">addForce(vector, force_type)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>Vector</strong>: A Vector of the direction and magnitude of force.</li> <li><a href="../types"><span class="tag int"></span></a> <strong>force_type</strong>: An Int representing the force type to apply. Options below.<ul> <li><span class="critic comment">Optional, defaults to 3.</span></li> <li><strong>1</strong>: Continuous force, uses mass. <em>(Force)</em></li> <li><strong>2</strong>: Continuous acceleration, ignores mass. <em>(Acceleration)</em></li> <li><strong>3</strong>: Instant force impulse, uses mass. <em>(Impulse)</em></li> <li><strong>4</strong>: Instant velocity change, ignores mass. <em>(Velocity Change)</em></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/counter/#clear':\
		'''<td><a class="anchor" id="clear"></a>clear()</td> <td>Resets Counter to 0.</td> <td align="right"><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#setname':\
		'''<td><a class="anchor" id="setname"></a>setName(<a href="../types"><span class="tag str"></span></a> name)</td> <td>Sets a name for an Object. Shows in tooltip.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#getquantity':\
		'''<td><a class="anchor" id="getquantity"></a>getQuantity()</td> <td>How many objects are in the stack. Returns -1 if the Object is not a stack.</td> <td><a href="../types"><span class="ret int"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/texttool/#setfontcolor':\
		'''<td><a class="anchor" id="setfontcolor"></a>setFontColor(<a href="../types#color"><span class="tag col"></span></a> font_color)</td> <td>Sets font Color.</td> <td><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#getstates':\
		'''<h4 id="getstates">getStates()<a class="headerlink" href="#getstates" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Table of information on the <a href="http://berserk-games.com/knowledgebase/creating-states/">states</a> of an Object. Stated Objects have ids (indexes) starting with 1.</p> <div class="admonition info"> <p class="admonition-title">Return Table</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>name</strong>: Name of the Object.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>guid</strong>: GUID of the Object.</li> <li><a href="../types"><span class="tag int"></span></a> <strong>id</strong>: ID (index) of the state.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/clock/#pausestart':\
		'''<td><a class="anchor" id="pausestart"></a>pauseStart()</td> <td>Pauses/resumes a Clock in stopwatch or timer mode.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td align="right"></td>''',
	'https://api.tabletopsimulator.com/base/#getallobjects':\
		'''<td><a class="anchor" id="getallobjects"></a>getAllObjects()</td> <td>Returns Table of all spawned <a href="../object">Objects</a> in the game.</td> <td><a href="../types"><span class="ret tab"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#getrotation':\
		'''<td><a class="anchor" id="getrotation"></a>getRotation()</td> <td>Returns a Vector of the current rotation.</td> <td><a href="../types#vector"><span class="ret vec"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/player/#steam_id':\
		'''<td><a class="anchor" id="steam_id"></a>steam_id</td> <td>The Steam ID of the player. This is unique to each player's Steam account. Read only.</td> <td align="left"><a href="../types"><span class="tag str"></span></a></td>''',
	'https://api.tabletopsimulator.com/base/#spawnobjectjson':\
		'''<h4 id="spawnobjectjson">spawnObjectJSON(...)<a class="headerlink" href="#spawnobjectjson" title="Permanent link"> </a></h4> <p>Spawns an Object using a JSON string. Works with <a href="../object#getjson">getJSON()</a>. It works just like spawnObject, but instead of a <code class="codehilite">type</code>, you supply a <code class="codehilite">json</code> string. The other parameters will overwrite those in the JSON.</p> <div class="admonition tip"> <p class="admonition-title">Tip</p> <p>Spawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. You can also add a delay after spawning using a <a href="../wait">Wait</a> function.</p> </div>''',
	'https://api.tabletopsimulator.com/object/#setvelocity':\
		'''<td><a class="anchor" id="setvelocity"></a>setVelocity(<a href="../types#vector"><span class="tag vec"></span></a> vector)</td> <td>Sets a Vector as the current velocity.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/clock/#startstopwatch':\
		'''<td><a class="anchor" id="startstopwatch"></a>startStopwatch()</td> <td>Switches clock to stopwatch, setting time to 0. It will reset time if already in stopwatch mode.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td align="right"></td>''',
	'https://api.tabletopsimulator.com/physics/#setgravity':\
		'''<td><a class="anchor" id="setgravity"></a>setGravity(<a href="../types#vector"><span class="tag vec"></span></a> direction)</td> <td>Sets the direction gravity gravity pulls.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/event/#onobjectleavecontainer':\
		'''<h3 id="onobjectleavecontainer">onObjectLeaveContainer(...)<a class="headerlink" href="#onobjectleavecontainer" title="Permanent link"> </a></h3> <p>Called when any object leaves any container.</p> <div class="admonition info"> <p class="admonition-title">onObjectLeaveContainer(container, leave_object)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>container</strong>: Container the object left.</li> <li><a href="../types"><span class="tag obj"></span></a> <strong>leave_object</strong>: Object that left the container.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/base/#destroyobject':\
		'''<h4 id="destroyobject">destroyObject(...)<a class="headerlink" href="#destroyobject" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Destroy an Object.</p> <div class="admonition info"> <p class="admonition-title">destroyObject(obj)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>obj</strong>: The Object you wish to delete from the instance.</li> </ul> </div> <hr> <h4 id="getobjectfromguid">getObjectFromGUID(...)<a class="headerlink" href="#getobjectfromguid" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret obj"></span></a> Returns Object by its GUID. Will return <code class="codehilite">nil</code> if this GUID doesn't currently exist.</p> <div class="admonition info"> <p class="admonition-title">getObjectFromGUID(guid)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>guid</strong>: GUID of the Object to get a reference of.<ul> <li><span class="critic comment">GUID can be obtained by right clicking an object and going to Scripting.</span></li> <li><span class="critic comment">In a script, it can be obtained from any Object by using .getGUID().</span></li> </ul> </li> </ul> </div> <hr/> <h4 id="getsnappoints">getSnapPoints()<a class="headerlink" href="#getsnappoints" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a table of sub-tables, each sub-table representing one snap point. You can also use this as an <a href="../object">Object</a> function. This function will NOT return information on snap points attached to Objects unless you use it on the Object. See an example on <a href="../object#getsnappoints">its entry</a> under the Object page.</p> <div class="admonition info"> <p class="admonition-title">Sub-table contents</p> <ul> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>position</strong>: Position of the snap point.<ul> <li><span class="critic comment">Optional, defaults to {0,0,0}.</span></li> </ul> </li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>rotation</strong>: Rotation of the snap point.<ul> <li><span class="critic comment">Optional, defaults to {0,0,0}.</span></li> </ul> </li> <li><a href="../types"><span class="tag boo"></span></a> <strong>rotation_snap</strong>: If the snap point is a "rotation" snap point.<ul> <li><span class="critic comment">Optional, defaults to false.</span></li> </ul> </li> </ul> </div> <p>Example: <div class="codehilite"><pre><span></span><span class="n">snapPointList</span> <span class="o">=</span> <span class="n">getSnapPoints</span><span class="p">()</span> <span class="n">log</span><span class="p">(</span><span class="n">snapPointsList</span><span class="p">)</span> </pre></div></p> <p>Returned table: <div class="codehilite"><pre><span></span><span class="p">{</span> <span class="p">{</span> <span class="n">position</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span> <span class="n">rotation</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">90</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span> <span class="n">rotation_snap</span> <span class="o">=</span> <span class="kc">false</span> <span class="p">},</span> <span class="p">{</span> <span class="n">position</span> <span class="o">=</span> <span class="p">{</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="n">rotation</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span> <span class="n">rotation_snap</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">},</span> <span class="p">}</span> </pre></div></p> <hr/> <h4 id="paste">paste(...)<a class="headerlink" href="#paste" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret obj"></span></a> Pastes Objects in-game that were copied to the in-game clipboard. Works with <a href="#copy">copy(...)</a>.</p> <div class="admonition info"> <p class="admonition-title">paste(parameters)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>parameters</strong>: A Table containing instructions of where to spawn the Objects.<ul> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.position</strong>: Position of the first object to paste.<ul> <li><span class="critic comment">Optional, defaults to {0, 3, 0}.</span></li> </ul> </li> <li><a href="../types"><span class="tag boo"></span></a> <strong>parameters.snap_to_grid</strong>: If snap-to-grid is active on the spawned item/s.<ul> <li><span class="critic comment">Optional, defaults to false (off).</span></li> </ul> </li> </ul> </li> </ul> </div> <hr/> <h4 id="setsnappoints">setSnapPoints(...)<a class="headerlink" href="#setsnappoints" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Spawns snap points from a list of parameters. You can also use this as an <a href="../object">Object</a> function. This function will NOT attach snap points to Objects unless you use it on the Object. See an example on <a href="../object#setsnappoints">its entry</a> under the Object page.</p> <div class="admonition info"> <p class="admonition-title">setSnapPoints(parameters)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>parameters</strong>: A table containing numerically indexed sub-tables.<ul> <li><a href="../types"><span class="tag str"></span></a> <strong>sub-table</strong>:<ul> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>position</strong>: Position of the snap point.<ul> <li><span class="critic comment">Optional, defaults to {0,0,0}.</span></li> </ul> </li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>rotation</strong>: Rotation of the snap point.<ul> <li><span class="critic comment">Optional, defaults to {0,0,0}.</span></li> </ul> </li> <li><a href="../types"><span class="tag boo"></span></a> <strong>rotation_snap</strong>: If the snap point is a "rotation" snap point.<ul> <li><span class="critic comment">Optional, defaults to false.</span></li> </ul> </li> </ul> </li> </ul> </li> </ul> </div> <div class="codehilite"><pre><span></span><span class="n">setSnapPoints</span><span class="p">({</span> <span class="p">{</span> <span class="n">position</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span> <span class="n">rotation</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">90</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span> <span class="n">rotation_snap</span> <span class="o">=</span> <span class="kc">false</span> <span class="p">},</span> <span class="p">{</span> <span class="n">position</span> <span class="o">=</span> <span class="p">{</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="n">rotation</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span> <span class="n">rotation_snap</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">},</span> <span class="p">})</span> </pre></div> <hr/> <h4 id="spawnobject">spawnObject(...)<a class="headerlink" href="#spawnobject" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret obj"></span></a> Spawn an Object. View the <a href="../spawnableobjects">Spawnable Objects</a> page for Objects that can be spawned.</p> <p>If you are spawning a <strong>custom Object</strong>, you should call <a href="../object#setcustomobject">setCustomObject</a> immediately after spawnObject to set its custom properties.</p> <div class="admonition tip"> <p class="admonition-title">Tip</p> <p>Spawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. You can also add a delay after spawning using a <a href="../wait">Wait</a> function.</p> </div> <div class="admonition info"> <p class="admonition-title">spawnObject(parameters)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>parameters</strong>: A Table of parameters used to determine how spawnObject will act.<ul> <li><a href="../types"><span class="tag str"></span></a> <strong>parameters.type</strong>: <a href="../spawnableobjects">Spawnable Object</a> type.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.position</strong>: Position to place Object.<ul> <li><span class="critic comment">Optional, defaults to {x=0, y=3, z=0}.</span></li> </ul> </li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.rotation</strong>: Rotation of the Object.<ul> <li><span class="critic comment">Optional, defaults to {x=0, y=0, z=0}</span></li> </ul> </li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.scale</strong>: Scale of the Object.<ul> <li><span class="critic comment">Optional, defaults to {x=1, y=1, z=1}</span></li> </ul> </li> <li><a href="../types"><span class="tag boo"></span></a> <strong>parameters.sound</strong>: If the spawned Object noise is played.<ul> <li><span class="critic comment">Optional, defaults to true.</span></li> </ul> </li> <li><a href="../types"><span class="tag boo"></span></a> <strong>parameters.snap_to_grid</strong>: If snap-to-grid is active on the Object.<ul> <li><span class="critic comment">Optional, defaults to false.</span></li> </ul> </li> <li><a href="../types#function"><span class="tag fun"></span></a> <strong>parameters.callback_function</strong>: The function to activate after the Object has finished spawning into the scene.<ul> <li><span class="critic comment">Optional, defaults to not being used.</span></li> <li><span class="critic comment">A reference to the object spawned is always passed to callback_function. See the example for how to access it.</span></li> </ul> </li> </ul> </li> </ul> </div> <div class="codehilite"><pre><span></span><span class="kr">function</span> <span class="nf">onLoad</span><span class="p">()</span> <span class="n">futureName</span> <span class="o">=</span> <span class="s2">"Spawned By Script!"</span> <span class="n">spawnParams</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">type</span> <span class="o">=</span> <span class="s2">"rpg_BEAR"</span><span class="p">,</span> <span class="n">position</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">z</span><span class="o">=-</span><span class="mi">5</span><span class="p">},</span> <span class="n">rotation</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">90</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="mi">0</span><span class="p">},</span> <span class="n">scale</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="mi">2</span><span class="p">},</span> <span class="n">sound</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span> <span class="n">snap_to_grid</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">callback_function</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="n">spawn_callback</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s2">"Bear"</span><span class="p">,</span> <span class="s2">"Green"</span><span class="p">)</span> <span class="kr">end</span> <span class="p">}</span> <span class="n">spawnObject</span><span class="p">(</span><span class="n">spawnParams</span><span class="p">)</span> <span class="kr">end</span> <span class="kr">function</span> <span class="nf">spawn_callback</span><span class="p">(</span><span class="n">object_spawned</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span> <span class="n">object_spawned</span><span class="p">.</span><span class="n">setName</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="n">object_spawned</span><span class="p">.</span><span class="n">setColorTint</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="kr">end</span> </pre></div> <hr/> <h4 id="spawnobjectjson">spawnObjectJSON(...)<a class="headerlink" href="#spawnobjectjson" title="Permanent link"> </a></h4> <p>Spawns an Object using a JSON string. Works with <a href="../object#getjson">getJSON()</a>. It works just like spawnObject, but instead of a <code class="codehilite">type</code>, you supply a <code class="codehilite">json</code> string. The other parameters will overwrite those in the JSON.</p> <div class="admonition tip"> <p class="admonition-title">Tip</p> <p>Spawned Objects take a moment to be physically spawned into the game. The purpose of the callback functionality is to allow you to run additional actions after the Object has been initiated fully into the instance. You can also add a delay after spawning using a <a href="../wait">Wait</a> function.</p> </div> <div class="admonition info"> <p class="admonition-title">spawnObjectJSON(parameters)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>parameters</strong>: A Table of parameters used to determine how spawnObjectJSON will act.<ul> <li><a href="../types"><span class="tag str"></span></a> <strong>parameters.json</strong>: <a href="../object#getjson">getJSON()</a> string.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.position</strong>: Position to place Object.<ul> <li><span class="critic comment">Optional, defaults to JSON's value.</span></li> </ul> </li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.rotation</strong>: Rotation of the Object.<ul> <li><span class="critic comment">Optional, defaults to JSON's value.</span></li> </ul> </li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.scale</strong>: Scale of the Object.<ul> <li><span class="critic comment">Optional, defaults to JSON's value.</span></li> </ul> </li> <li><a href="../types"><span class="tag boo"></span></a> <strong>parameters.sound</strong>: If the spawned Object noise is played.<ul> <li><span class="critic comment">Optional, defaults to JSON's value.</span></li> </ul> </li> <li><a href="../types"><span class="tag boo"></span></a> <strong>parameters.snap_to_grid</strong>: If snap-to-grid is active on the Object.<ul> <li><span class="critic comment">Optional, defaults to JSON's value.</span></li> </ul> </li> <li><a href="../types#function"><span class="tag fun"></span></a> <strong>parameters.callback_function</strong>: The function to activate after the Object has finished spawning into the scene.<ul> <li><span class="critic comment">Optional, defaults to not being used.</span></li> <li><span class="critic comment">A reference to the object spawned is always passed to callback_function. See the example for how to access it.</span></li> </ul> </li> </ul> </li> </ul> </div> <div class="codehilite"><pre><span></span><span class="kr">function</span> <span class="nf">onLoad</span><span class="p">()</span> <span class="n">futureName</span> <span class="o">=</span> <span class="s2">"Spawned By Script!"</span> <span class="n">spawnParams</span> <span class="o">=</span> <span class="p">{</span> <span class="n">json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">getJSON</span><span class="p">(),</span> <span class="n">position</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">z</span><span class="o">=-</span><span class="mi">5</span><span class="p">},</span> <span class="n">rotation</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">90</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="mi">0</span><span class="p">},</span> <span class="n">scale</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="mi">2</span><span class="p">},</span> <span class="n">sound</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span> <span class="n">snap_to_grid</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">callback_function</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="n">spawn_callback</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">futureName</span><span class="p">,</span> <span class="s2">"Red"</span><span class="p">)</span> <span class="kr">end</span> <span class="c1">--alternative format:</span> <span class="c1">--callback_function = |obj| spawn_callback(obj, futureName, "Red")</span> <span class="p">}</span> <span class="n">spawnObject</span><span class="p">(</span><span class="n">spawnParams</span><span class="p">)</span> <span class="kr">end</span> <span class="kr">function</span> <span class="nf">spawn_callback</span><span class="p">(</span><span class="n">object_spawned</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span> <span class="n">object_spawned</span><span class="p">.</span><span class="n">setName</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="n">object_spawned</span><span class="p">.</span><span class="n">setColorTint</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="kr">end</span> </pre></div> <hr/> <h4 id="startluacoroutine">startLuaCoroutine(...)<a class="headerlink" href="#startluacoroutine" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret obj"></span></a> Start a coroutine. A coroutine is similar to a function, but has the unique ability to have its run paused until the next frame of the game using <code class="codehilite">coroutine.yield(0)</code>.</p> <div class="admonition attention"> <p class="admonition-title">Attention</p> <p>You MUST return a 1 at the end of any coroutine or it will throw an error.</p> </div> <div class="admonition info"> <p class="admonition-title">startLuaCoroutine(function_owner, function_name)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>function_owner</strong>: The Object that the function being called is on. Global is a valid target.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>function_name</strong>: Name of the function being called as a coroutine.</li> </ul> </div> <div class="codehilite"><pre><span></span><span class="kr">function</span> <span class="nf">onLoad</span><span class="p">()</span> <span class="n">startLuaCoroutine</span><span class="p">(</span><span class="n">Global</span><span class="p">,</span> <span class="s2">"print_coroutine"</span><span class="p">)</span> <span class="kr">end</span> <span class="c1">-- Prints a message, waits 250 frames, prints another message</span> <span class="kr">function</span> <span class="nf">print_coroutine</span><span class="p">()</span> <span class="nb">print</span><span class="p">(</span><span class="s2">"Routine has Started"</span><span class="p">)</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span> <span class="kr">while</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">250</span> <span class="kr">do</span> <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span> <span class="nb">coroutine.yield</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="kr">end</span> <span class="nb">print</span><span class="p">(</span><span class="s2">"Routine has Finished"</span><span class="p">)</span> <span class="kr">return</span> <span class="mi">1</span> <span class="kr">end</span> </pre></div> <hr/> <h4 id="stringcolortorgb">stringColorToRGB(...)<a class="headerlink" href="#stringcolortorgb" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Converts a <a href="../player-color">Player Color</a> string into a Color Table for tinting.</p> <div class="admonition info"> <p class="admonition-title">stringColorToRGB(player_color)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong> A String of a <a href="../player-color">Player Color</a>.</li> </ul> </div> <div class="codehilite"><pre><span></span><span class="n">printToAll</span><span class="p">(</span><span class="s2">"Blue message"</span><span class="p">,</span> <span class="n">stringColorToRGB</span><span class="p">(</span><span class="s2">"Blue"</span><span class="p">))</span> </pre></div> <hr/> <h3 id="message-function-details">Message Function Details<a class="headerlink" href="#message-function-details" title="Permanent link"> </a></h3> <h4 id="broadcasttoall">broadcastToAll(...)<a class="headerlink" href="#broadcasttoall" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Print an on-screen message to all Players.</p> <div class="admonition info"> <p class="admonition-title">broadcastToAll(message, message_tint)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>message</strong>: Message to display on-screen.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>message_tint</strong>: A Table containing the RGB color tint for the text.</li> </ul> </div> <div class="codehilite"><pre><span></span><span class="n">msg</span> <span class="o">=</span> <span class="s2">"Hello all."</span> <span class="n">rgb</span> <span class="o">=</span> <span class="p">{</span><span class="n">r</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span> <span class="n">broadcastToAll</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">rgb</span><span class="p">)</span> </pre></div> <hr/> <h4 id="broadcasttocolor">broadcastToColor(...)<a class="headerlink" href="#broadcasttocolor" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Print an on-screen message to a specified Player and their in-game chat.</p> <div class="admonition info"> <p class="admonition-title">broadcastToColor(message, <a href="../player">player_color</a>, message_tint)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>message</strong>: Message to display on-screen.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> to receive the message.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>message_tint</strong>: RGB color tint for the text.</li> </ul> </div> <div class="codehilite"><pre><span></span><span class="n">msg</span> <span class="o">=</span> <span class="s2">"Hello White."</span> <span class="n">color</span> <span class="o">=</span> <span class="s2">"White"</span> <span class="n">rgb</span> <span class="o">=</span> <span class="p">{</span><span class="n">r</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span> <span class="n">broadcastToColor</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">rgb</span><span class="p">)</span> </pre></div> <hr/> <h4 id="log">log(...)<a class="headerlink" href="#log" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Print information to the log. The log is a separate chat window which is visible to all players in the instance.</p> <p>If a table is used for "element", the log will automatically display the key/value contents of it.</p> <div class="admonition info"> <p class="admonition-title">log(element, label, tag)</p> <ul> <li><a href="../types"><span class="tag var"></span></a> <strong>element</strong>: The information you want placed into the log.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>label</strong>: Text to be placed before the Var element is printed to the log.<ul> <li><span class="critic comment">Optional, defaults to an empty String. Empty Strings are not displayed.</span></li> </ul> </li> <li><a href="../types"><span class="tag str"></span></a> <strong>tag</strong>: Name that is usable to categorize log entries. (See: <a href="../logstyle">logStyle</a>)<ul> <li><span class="critic comment">Optional, defaults to an empty String. Empty Strings are not displayed.</span></li> </ul> </li> </ul> </div> <div class="codehilite"><pre><span></span><span class="n">log</span><span class="p">(</span><span class="n">getAllObjects</span><span class="p">(),</span> <span class="s2">"table"</span><span class="p">,</span> <span class="s2">"All Objects:"</span><span class="p">)</span> </pre></div> <hr/> <h4 id="logstyle">logStyle(...)<a class="headerlink" href="#logstyle" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Set style options for the specified tag type for the log. This can also be set in the system console with the "log_style_tag" command.</p> <div class="admonition info"> <p class="admonition-title">logStyle(tag, tint, prefix, postfix)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>tag</strong>: A String of the log's tag.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>tint</strong>: RGB value to tint the log entry's text.<ul> <li><span class="critic comment">String color will also work. Example: "Red"</span></li> </ul> </li> <li><a href="../types"><span class="tag str"></span></a> <strong>prefix</strong>: Text to place before this type of log entry.<ul> <li><span class="critic comment">Optional, defaults to an empty String. Empty Strings are not displayed.</span></li> </ul> </li> <li><a href="../types"><span class="tag str"></span></a> <strong>postfix</strong>: Text to place after this type of log entry.<ul> <li><span class="critic comment">Optional, defaults to an empty String. Empty Strings are not displayed.</span></li> </ul> </li> </ul> </div> <div class="codehilite"><pre><span></span><span class="kr">function</span> <span class="nf">onLoad</span><span class="p">()</span> <span class="n">logStyle</span><span class="p">(</span><span class="s2">"players"</span><span class="p">,</span> <span class="p">{</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">},</span> <span class="s2">""</span><span class="p">,</span> <span class="s2">"End List"</span><span class="p">)</span> <span class="n">log</span><span class="p">(</span><span class="n">getSeatedPlayers</span><span class="p">(),</span> <span class="s2">"players"</span><span class="p">)</span> <span class="kr">end</span> </pre></div> <hr/> <h4 id="print">print(...)<a class="headerlink" href="#print" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret nil"></span></a> Print a string into chat that only the host is able to see. Used for debugging scripts.</p> <div class="admonition info"> <p class="admonition-title">print(message)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>message</strong>: Text to print into the chat log.</li> </ul> </div> <hr/> <h4 id="printtoall">printToAll(...)<a class="headerlink" href="#printtoall" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Print a message into the in-game chat of all connected players.</p> <div class="admonition info"> <p class="admonition-title">printToAll(message, message_tint)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>message</strong>: Message to place into players' in-game chats.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>message_tint</strong>: RGB values for the text's color tint.</li> </ul> </div> <div class="codehilite"><pre><span></span><span class="n">printToAll</span><span class="p">(</span><span class="s2">"Hello World!"</span><span class="p">,</span> <span class="p">{</span><span class="n">r</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">})</span> </pre></div> <hr/> <h4 id="printtocolor">printToColor(...)<a class="headerlink" href="#printtocolor" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Print a message to the in-game chat of a specific player.</p> <div class="admonition info"> <p class="admonition-title">printToColor(message, <a href="../player-color">player_color</a>, message_tint)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>message</strong>: Message to place into the player's in-game chat.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the player that will receive the message.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>message_tint</strong>: RGB values for the text's color tint.</li> </ul> </div> <div class="codehilite"><pre><span></span><span class="n">printToColor</span><span class="p">(</span><span class="s2">"Hello Red."</span><span class="p">,</span> <span class="s2">"Red"</span><span class="p">,</span> <span class="p">{</span><span class="n">r</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">})</span> </pre></div> <hr/> </hr>''',
	'https://api.tabletopsimulator.com/lighting/#reflection_intensity':\
		'''<td><a class="anchor" id="reflection_intensity"></a>reflection_intensity</td> <td>The strength of the reflections from the background. Range = 0 to 1.</td> <td align="left"><a href="../types"><span class="tag flo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#clone':\
		'''<h4 id="clone">clone(...)<a class="headerlink" href="#clone" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret obj"></span></a> Copy/Paste this Object.</p> <div class="admonition info"> <p class="admonition-title">clone(parameters)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>parameters</strong>: A Table with information used when pasting.<ul> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.position</strong>: Where the Object is placed.<ul> <li><span class="critic comment">Optional, defaults to {x=0, y=3, z=0}.</span></li> </ul> </li> <li><a href="../types"><span class="tag boo"></span></a> <strong>parameters.snap_to_grid</strong>: If the Object snaps to grid.<ul> <li><span class="critic comment">Optional, defaults to false.</span></li> </ul> </li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/assetbundle/#getloopingeffects':\
		'''<h3 id="getloopingeffects">getLoopingEffects()<a class="headerlink" href="#getloopingeffects" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret tab"></span></a> Returns a Table with the keys "index" and "name" for each looping effect.</p> <p><div class="codehilite"><pre><span></span> <span class="c1">-- Example usage</span> <span class="n">effectTable</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">AssetBundle</span><span class="p">.</span><span class="n">getLoopingEffects</span><span class="p">()</span> </pre></div> <div class="codehilite"><pre><span></span> <span class="c1">-- Example returned table</span> <span class="p">{</span> <span class="p">{</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Effect Name 1"</span><span class="p">},</span> <span class="p">{</span><span class="n">index</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Effect Name 2"</span><span class="p">},</span> <span class="p">}</span> </pre></div></p>''',
	'https://api.tabletopsimulator.com/texttool/#setfontsize':\
		'''<td><a class="anchor" id="setfontsize"></a>setFontSize(<a href="../types"><span class="tag int"></span></a> font_size)</td> <td>Sets font size.</td> <td><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/player/#gethandtransform':\
		'''<h4 id="gethandtransform">getHandTransform(...)<a class="headerlink" href="#gethandtransform" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Table of data on this <a href="http://berserk-games.com/knowledgebase/hands/">hand zone</a>.</p> <div class="admonition info"> <p class="admonition-title">getHandTransform(hand_index)</p> <ul> <li><a href="../types"><span class="tag int"></span></a> <strong>hand_index</strong>: An index, representing which hand zone to return data on.<ul> <li><span class="critic comment">Optional, defaults to 1.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#getguid':\
		'''<td><a class="anchor" id="getguid"></a>getGUID()</td> <td>String of the Object's unique identifier.</td> <td><a href="../types"><span class="ret str"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/player/#sethandtransform':\
		'''<h4 id="sethandtransform">setHandTransform(...)<a class="headerlink" href="#sethandtransform" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Sets transform elements of a <a href="http://berserk-games.com/knowledgebase/hands/">hand zone</a>.</p> <div class="admonition info"> <p class="admonition-title">setHandTransform(parameters, hand_index)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>parameters</strong>: The Table of data to transform the hand zone with.<ul> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.position</strong>: Position of the hand zone.<ul> <li><span class="critic comment">Optional, defaults to {x=0, y=0, z=0}.</span></li> </ul> </li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.rotation</strong>: Rotation of the hand zone.<ul> <li><span class="critic comment">Optional, defaults to {x=0, y=0, z=0}.</span></li> </ul> </li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.scale</strong>: Scale of the hand zone.<ul> <li><span class="critic comment">Optional, defaults to {x=0, y=0, z=0}.</span></li> </ul> </li> </ul> </li> <li><a href="../types"><span class="tag int"></span></a> <strong>hand_index</strong>: Index, representing which hand zone to modify.<ul> <li><span class="critic comment">Optional, defaults to 1.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/event/#onobjectdestroy':\
		'''<h3 id="onobjectdestroy">onObjectDestroy(...)<a class="headerlink" href="#onobjectdestroy" title="Permanent link"> </a></h3> <p>Called whenever any object is destroyed. The dying Object has 1 frame left to live. This event fires immediately before the dying Object’s <code class="codehilite">onDestroy()</code> but their lifetime is the same final frame.</p> <div class="admonition info"> <p class="admonition-title">onObjectDestroy(dying_object)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>dying_object</strong>: The object that was destroyed.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/event/#onobjecttriggereffect':\
		'''<h3 id="onobjecttriggereffect">onObjectTriggerEffect(...)<a class="headerlink" href="#onobjecttriggereffect" title="Permanent link"> </a></h3> <p>Called whenever the trigger effect of an <a href="../assetbundle">AssetBundle</a> is activated.</p> <div class="admonition info"> <p class="admonition-title">onObjectTriggerEffect(loop_object, index)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>loop_object</strong>: AssetBundle which had its trigger activated.</li> <li><a href="../types"><span class="tag int"></span></a> <strong>index</strong>: Index number for the trigger activated.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/player/#getplayers':\
		'''<h4 id="getplayers">getPlayers()<a class="headerlink" href="#getplayers" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns Table of all Players in the instance.</p> <div class="codehilite"><pre><span></span><span class="c1">-- Blindfolding all players</span> <span class="n">playerList</span> <span class="o">=</span> <span class="n">Player</span><span class="p">.</span><span class="n">getPlayers</span><span class="p">()</span> <span class="kr">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">playerReference</span> <span class="kr">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">playerList</span><span class="p">)</span> <span class="kr">do</span> <span class="n">playerReference</span><span class="p">.</span><span class="n">blindfolded</span> <span class="o">=</span> <span class="kc">true</span> <span class="kr">end</span> </pre></div>''',
	'https://api.tabletopsimulator.com/object/#getrotationvalue':\
		'''<h4 id="getrotationvalue">getRotationValue()<a class="headerlink" href="#getrotationvalue" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret var"></span></a> Returns the current rotationValue. Rotation values are used to give value to different rotations (like dice) and are set using scripting or the Gizmo tool. The value returned is for the rotation that is closest to being pointed "up".</p> <p>The returned value will either be a number or a string, depending on the value that was given to that rotation.</p>''',
	'https://api.tabletopsimulator.com/object/#tag':\
		'''<td><a class="anchor" id="tag"></a>tag</td> <td>This object's type. Read only.</td> <td align="left"><a href="../types"><span class="tag str"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#createbutton':\
		'''<h4 id="createbutton">createButton(...)<a class="headerlink" href="#createbutton" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Creates a scripted button attached to the Object. Scripted buttons are buttons that can be clicked while in-game that trigger a function in a script.</p> <details class="tip"><summary>Button Tips</summary><ul><li>Buttons can not be clicked from their back side.</li><li>Buttons can not be clicked if there is another object between the pointer and the button. This does not include the Object the button is attached to.</li><li>Buttons are placed relative to the Object they are attached to.</li><li>The maximum font size is capped at 1000.</li><li>The minimum width/height is 60. Any lower number (besides 0) will appear to be 60. This prevents visual glitches involving the corner rounding.</li><li>A button width/height of 0 will cause the button not to be drawn, but its label will be. This can be a way to attach text to an Object.</li><li>You cannot assign an index to a button. It is given one automatically.</li></ul></details>''',
	'https://api.tabletopsimulator.com/event/#onscriptingbuttondown':\
		'''<h3 id="onscriptingbuttondown">onScriptingButtonDown(...)<a class="headerlink" href="#onscriptingbuttondown" title="Permanent link"> </a></h3> <p>Called when a scripting button (numpad by default) is pressed. The index range that is returned is 1-10.</p> <div class="admonition info"> <p class="admonition-title">onScriptingButtonDown(index, player_color)</p> <ul> <li><a href="../types"><span class="tag int"></span></a> <strong>index</strong>: Index number, representing which key was pressed.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the player who triggered the function.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#gettransformforward':\
		'''<h4 id="gettransformforward">getTransformForward()<a class="headerlink" href="#gettransformforward" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Vector of the forward direction of this Object. The direction is relative to how the object is facing.</p> <div class="codehilite"><pre><span></span><span class="c1">-- Example of moving forward 5 units</span> <span class="kr">function</span> <span class="nf">onLoad</span><span class="p">()</span> <span class="n">distance</span> <span class="o">=</span> <span class="mi">5</span> <span class="n">pos_target</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">getTransformForward</span><span class="p">()</span> <span class="n">pos_current</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">getPosition</span><span class="p">()</span> <span class="n">pos</span> <span class="o">=</span> <span class="p">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">pos_current</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">pos_target</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">distance</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">pos_current</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">pos_target</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">distance</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="n">pos_current</span><span class="p">.</span><span class="n">z</span> <span class="o">+</span> <span class="n">pos_target</span><span class="p">.</span><span class="n">z</span> <span class="o">*</span> <span class="n">distance</span><span class="p">,</span> <span class="p">}</span> <span class="n">self</span><span class="p">.</span><span class="n">setPositionSmooth</span><span class="p">(</span><span class="n">pos</span><span class="p">)</span> <span class="kr">end</span> </pre></div>''',
	'https://api.tabletopsimulator.com/object/#shufflestates':\
		'''<td><a class="anchor" id="shufflestates"></a>shuffleStates()</td> <td>Returns an Object reference to a new <a href="http://berserk-games.com/knowledgebase/creating-states/">state</a> after randomly selecting and changing to one.</td> <td><a href="../types"><span class="ret obj"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#rpgfigurine':\
		'''<td><a class="anchor" id="rpgfigurine"></a>RPGFigurine</td> <td>An <a href="../rpgfigurine">RPGFigurine</a>, which is an in-game animated figurine.</td>''',
	'https://api.tabletopsimulator.com/rpgfigurine/#onhit':\
		'''<h4 id="onhit">onHit(...)<a class="headerlink" href="#onhit" title="Permanent link"> </a></h4> <p>Activates when an attack is performed on this RPGFigurine Object. An attack is triggered via the context menu or pressing the appropriate number key. If this RPGFigurine is within the attack radius, this function is triggered, passing a parameter of the Object which attacked.</p> <div class="admonition info"> <p class="admonition-title">onHit(attacker)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>attacker</strong>: Reference to the RPGFigurine attacking the indicated RPGFigurine.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#shuffle':\
		'''<td><a class="anchor" id="shuffle"></a>shuffle()</td> <td>Shuffles/shakes up contents of a deck or bag.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#use_hands':\
		'''<td><a class="anchor" id="use_hands"></a>use_hands</td> <td>If this object can be held in a hand zone.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/player/#broadcast':\
		'''<h4 id="broadcast">broadcast(...)<a class="headerlink" href="#broadcast" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Print message on Player's screen and their game chat log.</p> <div class="admonition info"> <p class="admonition-title">broadcast(message, message_color)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>message</strong>: The message to be displayed.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>message_color</strong>: Tint of the message text.<ul> <li><span class="critic comment">Optional, defaults to {r=1, g=1, b=1}.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#rotate':\
		'''<h4 id="rotate">rotate(...)<a class="headerlink" href="#rotate" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Rotates Object smoothly in the direction of the given Vector. This does not set the Object to face a specific rotation, it rotates the Object around by the number of degrees given for x/y/z.</p> <div class="admonition info"> <p class="admonition-title">rotate(vector)</p> <ul> <li><a href="../types"><span class="tag vec"></span></a> <strong>vector</strong>: The amount of x/y/z to rotate by.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/webrequest/#get':\
		'''<h3 id="get">get(...)<a class="headerlink" href="#get" title="Permanent link"> </a></h3> <p>Get data from the current URL.</p> <div class="admonition info"> <p class="admonition-title">get(url, callback_function)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>url</strong>: The url to pull data from.</li> <li><a href="../types#function"><span class="tag fun"></span></a> <strong>callback_function</strong>: The function that will be triggered<ul> <li><span class="critic comment">Optional, but you will get no data back from the get if it isn't used.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#getlock':\
		'''<td><a class="anchor" id="getlock"></a>getLock()</td> <td>If the Object is locked.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#highlighton':\
		'''<td><a class="anchor" id="highlighton"></a>highlightOn(<a href="../types#color"><span class="tag col"></span></a> color, <a href="../types"><span class="tag flo"></span></a> duration)</td> <td>Creates a highlight around an Object.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#gettransformup':\
		'''<h4 id="gettransformup">getTransformUp()<a class="headerlink" href="#gettransformup" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Vector of the up direction of this Object. The direction is relative to how the object is facing.</p> <div class="codehilite"><pre><span></span><span class="c1">-- Example of moving up 5 units</span> <span class="kr">function</span> <span class="nf">onLoad</span><span class="p">()</span> <span class="n">distance</span> <span class="o">=</span> <span class="mi">5</span> <span class="n">pos_target</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">getTransformUp</span><span class="p">()</span> <span class="n">pos_current</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">getPosition</span><span class="p">()</span> <span class="n">pos</span> <span class="o">=</span> <span class="p">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">pos_current</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">pos_target</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">distance</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">pos_current</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">pos_target</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">distance</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="n">pos_current</span><span class="p">.</span><span class="n">z</span> <span class="o">+</span> <span class="n">pos_target</span><span class="p">.</span><span class="n">z</span> <span class="o">*</span> <span class="n">distance</span><span class="p">,</span> <span class="p">}</span> <span class="n">self</span><span class="p">.</span><span class="n">setPositionSmooth</span><span class="p">(</span><span class="n">pos</span><span class="p">)</span> <span class="kr">end</span> </pre></div>''',
	'https://api.tabletopsimulator.com/object/#mass':\
		'''<td><a class="anchor" id="mass"></a>mass</td> <td>Mass. <a href="https://docs.unity3d.com/Manual/class-Rigidbody.html">Unity rigidbody property</a>.</td> <td align="left"><a href="../types"><span class="tag flo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#getobjects':\
		'''<h4 id="getobjects">getObjects()<a class="headerlink" href="#getobjects" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Table of objects in the script zone/bag/deck. What it returns varies depending on the type of Object it is used on.</p> <p>If an Object is inside of a container, it does not exist in-game. As a result, you only get data on each Object, not an Object reference.</p> <div class="admonition info"> <p class="admonition-title">Return Table by Object Type</p> <div class="admonition info"> <p class="admonition-title">Scripting Zone</p> <p>Returns a Table of Object references to every object in the scripting zone.</p> <div class="codehilite"><pre><span></span><span class="p">{</span> <span class="n">object_1</span><span class="p">,</span> <span class="n">object_2</span><span class="p">,</span> <span class="p">}</span> </pre></div> </div> <div class="admonition info"> <p class="admonition-title">Bag</p> <p>Returns a Table of sub-Tables, each sub-Table containing data on 1 bagged item. Indexes start at 0.</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>name</strong>: Name of the Object.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>guid</strong>: GUID of the Object.</li> <li><a href="../types"><span class="tag int"></span></a> <strong>index</strong>: Index of the Object, represents the Object's place in the bag.</li> </ul> <div class="codehilite"><pre><span></span><span class="p">{</span> <span class="p">{</span> <span class="n">name</span> <span class="o">=</span> <span class="s2">"Object Name"</span><span class="p">,</span> <span class="n">guid</span> <span class="o">=</span> <span class="s2">"AAA111"</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">},</span> <span class="p">}</span> </pre></div> </div> <div class="admonition info"> <p class="admonition-title">Deck</p> <p>Returns a Table of sub-Tables, each sub-Table containing data on 1 card. Indexes start at 0.</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>nickname</strong>: Name of the card.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>description</strong>: Description of the card.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>guid</strong>: GUID of the card.</li> <li><a href="../types"><span class="tag int"></span></a> <strong>index</strong>: Index of the card, represents the card's order in the deck.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>lua_script</strong>: Any Lua scripting saved on the card.</li> </ul> <div class="codehilite"><pre><span></span><span class="p">{</span> <span class="p">{</span> <span class="n">nickname</span> <span class="o">=</span> <span class="s2">"Object Name"</span><span class="p">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s2">"Object Descripotion"</span><span class="p">,</span> <span class="n">guid</span> <span class="o">=</span> <span class="s2">"AAA111"</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">lua_script</span> <span class="o">=</span> <span class="s2">"Any Lua Script On This Card"</span><span class="p">,</span> <span class="p">},</span> <span class="p">}</span> </pre></div> </div> </div>''',
	'https://api.tabletopsimulator.com/object/#clearinputs':\
		'''<td><a class="anchor" id="clearinputs"></a>clearInputs()</td> <td>Removes all scripted inputs.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/clock/#getvalue':\
		'''<td><a class="anchor" id="getvalue"></a>getValue()</td> <td>Current time in stopwatch or timer mode. Clock mode returns 0. This function acts the same as <a href="../object#getvalue">Object's getValue()</a>.</td> <td><a href="../types"><span class="ret int"></span></a></td> <td align="right"></td>''',
	'https://api.tabletopsimulator.com/object/#tooltip':\
		'''<td><a class="anchor" id="tooltip"></a>tooltip</td> <td>If the tooltip opens when a pointer hovers over the object. Tooltips display name and description.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/player/#steam_name':\
		'''<td><a class="anchor" id="steam_name"></a>steam_name</td> <td>The Steam name of the player. Read only.</td> <td align="left"><a href="../types"><span class="tag str"></span></a></td>''',
	'https://api.tabletopsimulator.com/event/#onfixedupdate':\
		'''<h3 id="onfixedupdate">onFixedUpdate()<a class="headerlink" href="#onfixedupdate" title="Permanent link"> </a></h3> <p>Called <strong>every physics tick</strong> (90 times a second). This is a frame independent onUpdate().</p> <div class="admonition warning"> <p class="admonition-title">Warning</p> <p>This is a very expensive function and can easily slow/crash your game if misused. Use with caution.</p> </div> <div class="codehilite"><pre><span></span><span class="kr">function</span> <span class="nf">onFixedUpdate</span><span class="p">()</span> <span class="n">self</span><span class="p">.</span><span class="n">addTorque</span><span class="p">({</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span> <span class="mi">1</span><span class="p">)</span> <span class="kr">end</span> </pre></div>''',
	'https://api.tabletopsimulator.com/event/#onupdate':\
		'''<h3 id="onupdate">onUpdate()<a class="headerlink" href="#onupdate" title="Permanent link"> </a></h3> <p>Called <strong>every frame</strong>.</p> <div class="admonition warning"> <p class="admonition-title">Warning</p> <p>This is a very expensive function and can easily slow/crash your game if misused. Use with caution.</p> </div> <div class="codehilite"><pre><span></span><span class="kr">function</span> <span class="nf">onUpdate</span><span class="p">()</span> <span class="nb">print</span><span class="p">(</span><span class="s2">"This will probably slow your game down."</span><span class="p">)</span> <span class="kr">end</span> </pre></div>''',
	'https://api.tabletopsimulator.com/object/#getbuttons':\
		'''<h4 id="getbuttons">getButtons()<a class="headerlink" href="#getbuttons" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Table of all buttons on this Object. The Table contains parameters tables with the same keys as seen in the <a href="#createbutton">createButton</a> section, except each Table of parameters also contains an <strong>index</strong> entry. This is used to identify each button, used by <a href="#editbutton">editButton</a> and <a href="#removebutton">removeButton</a>.</p>''',
	'https://api.tabletopsimulator.com/player/#gethoverobject':\
		'''<td><a class="anchor" id="gethoverobject"></a>getHoverObject()</td> <td>Object that the Player's pointer is hovering over.</td> <td><a href="../types"><span class="ret obj"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/turns/#functions':\
		'''<h3 id="functions">Functions<a class="headerlink" href="#functions" title="Permanent link"> </a></h3> <table> <thead> <tr> <th>Function Name</th> <th>Description</th> <th align="right">Return</th> </tr> </thead> <tbody> <tr> <td><a class="anchor" id="getnextturncolor"></a>getNextTurnColor()</td> <td>Returns the Player Color string of the next player in the turn order.</td> <td align="right"><a href="../types"><span class="ret str"></span></a></td> </tr> <tr> <td><a class="anchor" id="getpreviousturncolor"></a>getPreviousTurnColor()</td> <td>Returns the Player Color string of the previous player in the turn order.</td> <td align="right"><a href="../types"><span class="ret str"></span></a></td> </tr> </tbody> </table>''',
	'https://api.tabletopsimulator.com/object/#getsnappoints':\
		'''<h4 id="getsnappoints">getSnapPoints()<a class="headerlink" href="#getsnappoints" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a table of sub-tables, each sub-table representing one snap point. You can also use this as a <a href="../base">Global Base</a> function. This function will only return information on snap points attached to Objects unless you use it without an Object. See an example on <a href="../base#getsnappoints">its entry</a> under the Base page.</p>''',
	'https://api.tabletopsimulator.com/base/#log':\
		'''<h4 id="log">log(...)<a class="headerlink" href="#log" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Print information to the log. The log is a separate chat window which is visible to all players in the instance.</p> <p>If a table is used for "element", the log will automatically display the key/value contents of it.</p> <div class="admonition info"> <p class="admonition-title">log(element, label, tag)</p> <ul> <li><a href="../types"><span class="tag var"></span></a> <strong>element</strong>: The information you want placed into the log.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>label</strong>: Text to be placed before the Var element is printed to the log.<ul> <li><span class="critic comment">Optional, defaults to an empty String. Empty Strings are not displayed.</span></li> </ul> </li> <li><a href="../types"><span class="tag str"></span></a> <strong>tag</strong>: Name that is usable to categorize log entries. (See: <a href="../logstyle">logStyle</a>)<ul> <li><span class="critic comment">Optional, defaults to an empty String. Empty Strings are not displayed.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/player/#lookat':\
		'''<h4 id="lookat">lookAt(...)<a class="headerlink" href="#lookat" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Moves a Player's camera, forcing 3'rd person camera mode.</p> <div class="admonition info"> <p class="admonition-title">lookAt(parameters)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>parameters</strong>: A Table of controlling parameters to point the player camera.<ul> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.position</strong>: Position to center the camera on.</li> <li><a href="../types"><span class="tag flo"></span></a> <strong>parameters.pitch</strong>: Pitch angle of the camera. 0 to 90.<ul> <li><span class="critic comment">Optional, defaults to 0.</span></li> </ul> </li> <li><a href="../types"><span class="tag flo"></span></a> <strong>parameters.yaw</strong>: Yaw angle of the camera. -180 to 180.<ul> <li><span class="critic comment">Optional, defaults to 0.</span></li> </ul> </li> <li><a href="../types"><span class="tag flo"></span></a> <strong>parameters.distance</strong>: Distance the camera is from the position Vector.<ul> <li><span class="critic comment">Optional, defaults to 40.</span></li> </ul> </li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/json/#encode':\
		'''<h3 id="encode">encode(...)<a class="headerlink" href="#encode" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret str"></span></a> Encodes data from a number, string or Table into a JSON string.</p> <div class="admonition info"> <p class="admonition-title">encode(data)</p> <ul> <li><a href="../types"><span class="tag var"></span></a> <strong>data</strong>: A Var, either String, Int, Float or Table, to encode as a string.</li> </ul> </div> <hr> <h3 id="encode_pretty">encode_pretty(...)<a class="headerlink" href="#encode_pretty" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret str"></span></a> Encodes data from a number, string or Table into a JSON string. This version is slightly less efficient but is easier to read.</p> <div class="admonition info"> <p class="admonition-title">encode_pretty(data)</p> <ul> <li><a href="../types"><span class="tag var"></span></a> <strong>data</strong>: A Var, either String, Int, Float or Table, to encode as a string.</li> </ul> </div> </hr>''',
	'https://api.tabletopsimulator.com/lighting/#getlightcolor':\
		'''<td><a class="anchor" id="getlightcolor"></a>getLightColor()</td> <td>Returns Color Table of the directional light, which shines straight down on the table.</td> <td align="right"><a href="../types#color"><span class="ret col"></span></a></td>''',
	'https://api.tabletopsimulator.com/base/#clearvectorpaint':\
		'''<td><a class="anchor" id="clearvectorpaint"></a>clearVectorPaint()</td> <td>Remove vector paint from the instance.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/lighting/#setlightcolor':\
		'''<td><a class="anchor" id="setlightcolor"></a>setLightColor(<a href="../types#color"><span class="tag col"></span></a> tint)</td> <td>Sets the color of the directional light, which shines straight down on the table.</td> <td align="right"><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/base/#getobjectfromguid':\
		'''<h4 id="getobjectfromguid">getObjectFromGUID(...)<a class="headerlink" href="#getobjectfromguid" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret obj"></span></a> Returns Object by its GUID. Will return <code class="codehilite">nil</code> if this GUID doesn't currently exist.</p> <div class="admonition info"> <p class="admonition-title">getObjectFromGUID(guid)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>guid</strong>: GUID of the Object to get a reference of.<ul> <li><span class="critic comment">GUID can be obtained by right clicking an object and going to Scripting.</span></li> <li><span class="critic comment">In a script, it can be obtained from any Object by using .getGUID().</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/base/#stringcolortorgb':\
		'''<h4 id="stringcolortorgb">stringColorToRGB(...)<a class="headerlink" href="#stringcolortorgb" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Converts a <a href="../player-color">Player Color</a> string into a Color Table for tinting.</p> <div class="admonition info"> <p class="admonition-title">stringColorToRGB(player_color)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong> A String of a <a href="../player-color">Player Color</a>.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/event/#onobjectleavescriptingzone':\
		'''<h3 id="onobjectleavescriptingzone">onObjectLeaveScriptingZone(...)<a class="headerlink" href="#onobjectleavescriptingzone" title="Permanent link"> </a></h3> <p>Called when any object leaves any scripting zone.</p> <div class="admonition info"> <p class="admonition-title">onObjectLeaveScriptingZone(zone, enter_object)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>zone</strong>: The Object of the scripting zone.</li> <li><a href="../types"><span class="tag obj"></span></a> <strong>enter_object</strong>: The Object triggering the function.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/rpgfigurine/#die':\
		'''<td><a class="anchor" id="die"></a>die()</td> <td>Plays the death animation or causes it to return to life.</td> <td><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/counter/#decrement':\
		'''<td><a class="anchor" id="decrement"></a>decrement()</td> <td>Reduces Counter's value by 1.</td> <td align="right"><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/texttool/#getvalue':\
		'''<td><a class="anchor" id="getvalue"></a>getValue()</td> <td>Returns the current text. Works the same as Object's <a href="../object#getvalue">getValue()</a>.</td> <td><a href="../types"><span class="ret str"></span></a></td>''',
	'https://api.tabletopsimulator.com/player/#team':\
		'''<td><a class="anchor" id="team"></a>team</td> <td>The team of the player.<br/>Options: <code class="codehilite">"None", "Clubs", "Diamonds", "Hearts", "Spades", "Jokers"</code>.</td> <td align="left"><a href="../types"><span class="tag str"></span></a></td>''',
	'https://api.tabletopsimulator.com/event/#onsearchstart':\
		'''<h3 id="onsearchstart">onSearchStart(...)<a class="headerlink" href="#onsearchstart" title="Permanent link"> </a></h3> <p>Called when a player finishes searching this Object.</p> <div class="admonition info"> <p class="admonition-title">onSearchStart(<a href="../types"><span class="tag str"></span></a> player_color)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the Player.</li> </ul> </div> <hr/>''',
	'https://api.tabletopsimulator.com/rpgfigurine/#attack':\
		'''<td><a class="anchor" id="attack"></a>attack()</td> <td>Plays a random attack animation.</td> <td><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#setsnappoints':\
		'''<h4 id="setsnappoints">setSnapPoints(...)<a class="headerlink" href="#setsnappoints" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Spawns snap points from a list of parameters. You can also use this as a <a href="../base">Global Base</a> function. This function will only attach snap points to Objects unless you use it without an Object. See an example on <a href="../base#setsnappoints">its entry</a> under the Base page.</p> <div class="admonition info"> <p class="admonition-title">setSnapPoints(parameters)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>parameters</strong>: A table containing numerically indexed sub-tables.<ul> <li><a href="../types"><span class="tag str"></span></a> <strong>sub-table</strong>:<ul> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>position</strong>: Position of the snap point. This is relative to the Object's position (local).<ul> <li><span class="critic comment">Optional, defaults to {0,0,0}.</span></li> </ul> </li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>rotation</strong>: Rotation of the snap point. This is relative to the Object's rotation (local).<ul> <li><span class="critic comment">Optional, defaults to {0,0,0}.</span></li> </ul> </li> <li><a href="../types"><span class="tag boo"></span></a> <strong>rotation_snap</strong>: If the snap point is a "rotation" snap point.<ul> <li><span class="critic comment">Optional, defaults to false.</span></li> </ul> </li> </ul> </li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#getdescription':\
		'''<td><a class="anchor" id="getdescription"></a>getDescription()</td> <td>Description, also shows as part of Object's tooltip.</td> <td><a href="../types"><span class="ret str"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#getbounds':\
		'''<h4 id="getbounds">getBounds()<a class="headerlink" href="#getbounds" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Table of Vector information describing the size of an object in Global terms. <a href="https://docs.unity3d.com/ScriptReference/Bounds.html">Bounds</a> are part of Unity, and represent an imaginary square box that can be drawn around an object. Unlike scale, it can help indicate the size of an object in in-game units, not just relative model size.</p>''',
	'https://api.tabletopsimulator.com/object/#translate':\
		'''<td><a class="anchor" id="translate"></a>translate(<a href="../types#vector"><span class="tag vec"></span></a> vector)</td> <td>Smoothly moves Object by the given Vector offset.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#clock':\
		'''<td><a class="anchor" id="clock"></a>Clock</td> <td>A <a href="../clock">Clock</a>, which is the in-game digital clock.</td>''',
	'https://api.tabletopsimulator.com/event/#onobjectdrop':\
		'''<h3 id="onobjectdrop">onObjectDrop(...)<a class="headerlink" href="#onobjectdrop" title="Permanent link"> </a></h3> <p>Called whenever any object is dropped by a player.</p> <div class="admonition info"> <p class="admonition-title">onObjectDrop(player_color, dropped_object)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the Player who dropped the Object.</li> <li><a href="../types"><span class="tag obj"></span></a> <strong>dropped_object</strong>: The Object in game which was dropped.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#getscale':\
		'''<h4 id="getscale">getScale()<a class="headerlink" href="#getscale" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Vector of the current scale. Scale is not an absolute measurement, it is a multiple of the Object's default model size. So {x=2, y=2, z=2} would be a model twice its default size, not 2 units large.</p> <hr/>''',
	'https://api.tabletopsimulator.com/object/#reload':\
		'''<h4 id="reload">reload()<a class="headerlink" href="#reload" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret obj"></span></a> Returns Object reference of itself after it respawns itself. This function causes the Object to be deleted and respawned instantly to refresh it, so its old Object reference will no longer be valid.</p> <p>Most often this is used after using <a href="#setcustomobject">setCustomObject(...)</a> to modify a custom object.</p> <hr/>''',
	'https://api.tabletopsimulator.com/player/#changecolor':\
		'''<h4 id="changecolor">changeColor(...)<a class="headerlink" href="#changecolor" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Changes player to this <a href="../player-color">Player Color</a> (seat).</p> <div class="admonition info"> <p class="admonition-title">changeColor(player_color)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: The <a href="../player-color">Player Color</a> seat to move the Player to.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/lighting/#setambientequatorcolor':\
		'''<td><a class="anchor" id="setambientequatorcolor"></a>setAmbientEquatorColor(<a href="../types#color"><span class="tag col"></span></a> tint)</td> <td>Sets the color of the gradient equator. Not used if <code class="codehilite">ambient_type = 1</code>.</td> <td align="right"><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/player/#lift_height':\
		'''<td><a class="anchor" id="lift_height"></a>lift_height</td> <td>The lift height for the player. This is how far an object is raised when held in a player's hand. Value is ranged 0 to 1.</td> <td align="left"><a href="../types"><span class="tag flo"></span></a></td>''',
	'https://api.tabletopsimulator.com/counter/#getvalue':\
		'''<td><a class="anchor" id="getvalue"></a>getValue()</td> <td>Returns Int of the current value displayed by the Counter. This function acts the same as <a href="../object#getvalue">Object's getValue()</a>.</td> <td align="right"><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/event/#onplayerchangecolor':\
		'''<h3 id="onplayerchangecolor">onPlayerChangeColor(...)<a class="headerlink" href="#onplayerchangecolor" title="Permanent link"> </a></h3> <p>Called when a player changes color or selects it for the first time. It also returns <code class="codehilite">"Grey"</code> if they disconnect.</p> <div class="admonition info"> <p class="admonition-title">onPlayerChangeColor(player_color)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the player who triggered the function.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#setscale':\
		'''<td><a class="anchor" id="setscale"></a>setScale(<a href="../types#vector"><span class="tag vec"></span></a> vector)</td> <td>Sets a Vector as the current scale.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/ui/#show':\
		'''<h3 id="show">show(...)<a class="headerlink" href="#show" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret boo"></span></a> Shows the given UI element. Unlike the "active" attribute, show triggers animations.</p> <div class="admonition info"> <p class="admonition-title">show(id)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>id</strong>: The Id that was assigned, as an attribute, to the desired XML UI element.</li> </ul> </div> <div class="codehilite"><pre><span></span><span class="n">self</span><span class="p">.</span><span class="n">UI</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="s2">"testElement"</span><span class="p">)</span> </pre></div>''',
	'https://api.tabletopsimulator.com/ui/#getattributes':\
		'''<h3 id="getattributes">getAttributes(...)<a class="headerlink" href="#getattributes" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret tab"></span></a> Returns the attributes and their values of a UI element. It only returns the attributes (and values) for elements that have had those attributes set by the user.</p> <div class="admonition info"> <p class="admonition-title">getAttributes(id)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>id</strong>: The Id that was assigned, as an attribute, to the desired XML UI element.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#setdescription':\
		'''<td><a class="anchor" id="setdescription"></a>setDescription(<a href="../types"><span class="tag str"></span></a> description)</td> <td>Sets a description for an Object. Shows in tooltip after delay.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/base/#logstyle':\
		'''<h4 id="logstyle">logStyle(...)<a class="headerlink" href="#logstyle" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Set style options for the specified tag type for the log. This can also be set in the system console with the "log_style_tag" command.</p> <div class="admonition info"> <p class="admonition-title">logStyle(tag, tint, prefix, postfix)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>tag</strong>: A String of the log's tag.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>tint</strong>: RGB value to tint the log entry's text.<ul> <li><span class="critic comment">String color will also work. Example: "Red"</span></li> </ul> </li> <li><a href="../types"><span class="tag str"></span></a> <strong>prefix</strong>: Text to place before this type of log entry.<ul> <li><span class="critic comment">Optional, defaults to an empty String. Empty Strings are not displayed.</span></li> </ul> </li> <li><a href="../types"><span class="tag str"></span></a> <strong>postfix</strong>: Text to place after this type of log entry.<ul> <li><span class="critic comment">Optional, defaults to an empty String. Empty Strings are not displayed.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/base/#getseatedplayers':\
		'''<td><a class="anchor" id="getseatedplayers"></a>getSeatedPlayers()</td> <td>Returns Table of the <a href="../player-color">Player Colors</a> strings of seated players.</td> <td><a href="../types"><span class="ret tab"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/json/#decode':\
		'''<h3 id="decode">decode(...)<a class="headerlink" href="#decode" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret var"></span></a> Value obtained from the encoded string. Can return a number, string or Table.</p> <div class="admonition info"> <p class="admonition-title">decode(json_string)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>json_string</strong>: A String that is decoded, generally created by encode(...) or encode_pretty(...).</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/clock/#paused':\
		'''<td><a class="anchor" id="paused"></a>paused</td> <td>If the clock timer is paused.</td> <td align="left"><a href="../types"><span class="tag boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/webrequest/#put':\
		'''<h3 id="put">put(...)<a class="headerlink" href="#put" title="Permanent link"> </a></h3> <p>Post the data to the URL.</p> <div class="admonition info"> <p class="admonition-title">put(url, data, callback_function)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>url</strong>: The url to pull post to.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>data</strong>: The data string to post. </li> <li><a href="../types#function"><span class="tag fun"></span></a> <strong>callback_function</strong>: The function that will be triggered<ul> <li><span class="critic comment">Optional, but you will get no data back from the get if it isn't used.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/base/#broadcasttocolor':\
		'''<h4 id="broadcasttocolor">broadcastToColor(...)<a class="headerlink" href="#broadcasttocolor" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Print an on-screen message to a specified Player and their in-game chat.</p> <div class="admonition info"> <p class="admonition-title">broadcastToColor(message, <a href="../player">player_color</a>, message_tint)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>message</strong>: Message to display on-screen.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> to receive the message.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>message_tint</strong>: RGB color tint for the text.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/texttool/#setvalue':\
		'''<td><a class="anchor" id="setvalue"></a>setValue(<a href="../types"><span class="tag str"></span></a> text)</td> <td>Sets the current text. Works the same as Object's <a href="../object#setvalue">setValue(...)</a>.</td> <td><a href="../types"><span class="ret boo"></span></a></td>''',
	'https://api.tabletopsimulator.com/object/#setposition':\
		'''<td><a class="anchor" id="setposition"></a>setPosition(<a href="../types#vector"><span class="tag vec"></span></a> vector)</td> <td>Instantly moves an Object to the given Vector.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#get-functions':\
		'''<h3 id="get-functions">Get Functions<a class="headerlink" href="#get-functions" title="Permanent link"> </a></h3> <p>These functions obtain information from an object.</p> <table> <thead> <tr> <th>Function Name</th> <th>Description</th> <th>Return</th> <th> </th> </tr> </thead> <tbody> <tr> <td><a class="anchor" id="getcolortint"></a>getColorTint()</td> <td>Color tint.</td> <td><a href="../types#color"><span class="ret col"></span></a></td> <td></td> </tr> <tr> <td>getCustomObject()</td> <td>Returns a Table with the Custom Object information of a Custom Object.</td> <td><a href="../types"><span class="ret tab"></span></a></td> <td><a href="#getcustomobject"><span class="i"></span></a></td> </tr> <tr> <td><a class="anchor" id="getdescription"></a>getDescription()</td> <td>Description, also shows as part of Object's tooltip.</td> <td><a href="../types"><span class="ret str"></span></a></td> <td></td> </tr> <tr> <td><a class="anchor" id="getguid"></a>getGUID()</td> <td>String of the Object's unique identifier.</td> <td><a href="../types"><span class="ret str"></span></a></td> <td></td> </tr> <tr> <td><a class="anchor" id="getjson"></a>getJSON()</td> <td>Returns a serialization of the JSON string which represents this item. Works with <a href="../base#spawnobjectjson">spawnObjectJSON()</a>.</td> <td><a href="../types"><span class="ret str"></span></a></td> <td></td> </tr> <tr> <td><a class="anchor" id="getlock"></a>getLock()</td> <td>If the Object is locked.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td> </tr> <tr> <td><a class="anchor" id="getluascript"></a>getLuaScript()</td> <td>Get a Lua script as a string.</td> <td><a href="../types"><span class="ret str"></span></a></td> <td></td> </tr> <tr> <td><a class="anchor" id="getname"></a>getName()</td> <td>Name, also shows as part of Object's tooltip.</td> <td><a href="../types"><span class="ret str"></span></a></td> <td></td> </tr> <tr> <td>getObjects()</td> <td>Returns a Table of Objects in the script zone/bag/deck.</td> <td><a href="../types"><span class="ret tab"></span></a></td> <td><a href="#getobjects"><span class="i"></span></a></td> </tr> <tr> <td><a class="anchor" id="getquantity"></a>getQuantity()</td> <td>How many objects are in the stack. Returns -1 if the Object is not a stack.</td> <td><a href="../types"><span class="ret int"></span></a></td> <td></td> </tr> <tr> <td>getRotationValue()</td> <td>Returns the current rotationValue. Rotation values are used to give value to different rotations (like dice).</td> <td><a href="../types"><span class="ret var"></span></a></td> <td><a href="#getrotationvalue"><span class="i"></span></a></td> </tr> <tr> <td>getRotationValues()</td> <td>Returns a Table of rotation values. Rotation values are used to give value to different rotations (like dice).</td> <td><a href="../types"><span class="ret tab"></span></a></td> <td><a href="#getrotationvalues"><span class="i"></span></a></td> </tr> <tr> <td>getSnapPoints()</td> <td>Returns a table of sub-tables, each sub-table representing one snap point.</td> <td><a href="../types"><span class="ret tab"></span></a></td> <td><a href="#getsnappoints"><span class="i"></span></a></td> </tr> <tr> <td><a class="anchor" id="getstateid"></a>getStateId()</td> <td>Current <a href="http://berserk-games.com/knowledgebase/creating-states/">state</a> ID (index) an object is in. Returns -1 if there are no other states. State ids (indexes) start at 1.</td> <td><a href="../types"><span class="ret int"></span></a></td> <td></td> </tr> <tr> <td>getStates()</td> <td>Returns a Table of information on the <a href="http://berserk-games.com/knowledgebase/creating-states/">states</a> of an Object.</td> <td><a href="../types"><span class="ret tab"></span></a></td> <td><a href="#getstates"><span class="i"></span></a></td> </tr> <tr> <td><a class="anchor" id="gettable"></a>getTable(<a href="../types"><span class="tag str"></span></a> func_name)</td> <td>Data value of a variable in another Object's script. Can only return a table.</td> <td><a href="../types"><span class="ret tab"></span></a></td> <td></td> </tr> <tr> <td>getValue()</td> <td>Object value. What the value represents depends on what type of Object this function is used on.</td> <td><a href="../types"><span class="ret int"></span></a></td> <td><a href="#getvalue"><span class="i"></span></a></td> </tr> <tr> <td><a class="anchor" id="getvar"></a>getVar(<a href="../types"><span class="tag str"></span></a> func_name)</td> <td>Data value of a variable in another Object's script. Cannot return a table.</td> <td><a href="../types"><span class="ret var"></span></a></td> <td></td> </tr> </tbody> </table>''',
	'https://api.tabletopsimulator.com/assetbundle/#playtriggereffect':\
		'''<td><a class="anchor" id="playtriggereffect"></a>playTriggerEffect(<a href="../types"><span class="tag int"></span></a> index)</td> <td>Starts playing a trigger effect. Indexs starts at 0.</td> <td><a href="../types"><span class="ret nil"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/lighting/#getambientgroundcolor':\
		'''<td><a class="anchor" id="getambientgroundcolor"></a>getAmbientGroundColor()</td> <td>Returns Color Table of the gradient ground. Not used if <code class="codehilite">ambient_type = 1</code>.</td> <td align="right"><a href="../types#color"><span class="ret col"></span></a></td>''',
	'https://api.tabletopsimulator.com/player/#getpointerposition':\
		'''<td><a class="anchor" id="getpointerposition"></a>getPointerPosition()</td> <td>Player's pointer coordinates.</td> <td><a href="../types#vector"><span class="ret vec"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/assetbundle/#gettriggereffects':\
		'''<h3 id="gettriggereffects">getTriggerEffects()<a class="headerlink" href="#gettriggereffects" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret tab"></span></a> Returns a Table with the keys "index" and "name" for each trigger effect.</p> <p><div class="codehilite"><pre><span></span> <span class="c1">-- Example usage</span> <span class="n">effectTable</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">AssetBundle</span><span class="p">.</span><span class="n">getTriggerEffects</span><span class="p">()</span> </pre></div> <div class="codehilite"><pre><span></span> <span class="c1">-- Example returned table</span> <span class="p">{</span> <span class="p">{</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Effect Name 1"</span><span class="p">},</span> <span class="p">{</span><span class="n">index</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s2">"Effect Name 2"</span><span class="p">},</span> <span class="p">}</span> </pre></div></p>''',
	'https://api.tabletopsimulator.com/player/#attachcameratoobject':\
		'''<h4 id="attachcameratoobject">attachCameraToObject(...)<a class="headerlink" href="#attachcameratoobject" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Makes a Player's camera follow an Object.</p> <div class="admonition info"> <p class="admonition-title">attachCameraToObject(parameters)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>parameters</strong>: A Table with parameters which guide the function.<ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>parameters.object</strong>: The Object to attach the camera to.</li> <li><a href="../types#vector"><span class="tag vec"></span></a> <strong>parameters.offset</strong>: A Vector to offset the camera by.<ul> <li><span class="critic comment">Optional, defaults to {x=0, y=0, z=0}.</span></li> </ul> </li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#setangularvelocity':\
		'''<td><a class="anchor" id="setangularvelocity"></a>setAngularVelocity(<a href="../types#vector"><span class="tag vec"></span></a> vector)</td> <td>Sets a Vector as the current angular velocity.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#assetbundle':\
		'''<td><a class="anchor" id="assetbundle"></a>AssetBundle</td> <td>An <a href="../assetbundle">AssetBundle</a>, which is a type of custom object made in Unity.</td>''',
	'https://api.tabletopsimulator.com/player/#getspectators':\
		'''<h4 id="getspectators">getSpectators()<a class="headerlink" href="#getspectators" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns Table of all Players in spectator (Grey).</p> <div class="codehilite"><pre><span></span><span class="c1">-- Printing steam name of all players to host chat</span> <span class="n">playerList</span> <span class="o">=</span> <span class="n">Player</span><span class="p">.</span><span class="n">getSpectators</span><span class="p">()</span> <span class="kr">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">playerReference</span> <span class="kr">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">playerList</span><span class="p">)</span> <span class="kr">do</span> <span class="nb">print</span><span class="p">(</span><span class="n">playerReference</span><span class="p">.</span><span class="n">steam_name</span><span class="p">)</span> <span class="kr">end</span> </pre></div>''',
	'https://api.tabletopsimulator.com/object/#drag':\
		'''<td><a class="anchor" id="drag"></a>drag</td> <td>Drag. <a href="https://docs.unity3d.com/Manual/class-Rigidbody.html">Unity rigidbody property</a>.</td> <td align="left"><a href="../types"><span class="tag flo"></span></a></td>''',
	'https://api.tabletopsimulator.com/rpgfigurine/#onattack':\
		'''<h4 id="onattack">onAttack(...)<a class="headerlink" href="#onattack" title="Permanent link"> </a></h4> <p>Activates when an attack is performed by an identified RPGFigurine Object. An attack is triggered via the context menu or pressing the appropriate number key. If another RPGFigurine is within its attack arch, then the function will be triggered with the figurine hit passed as a parameter.</p> <div class="admonition info"> <p class="admonition-title">onAttack(hit_list)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>hit_list</strong>: A Table of RPGFigurine Object references within the reach of the attack.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/player/#gethandobjects':\
		'''<h4 id="gethandobjects">getHandObjects(...)<a class="headerlink" href="#gethandobjects" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Returns a Table of Objects that are in this <a href="http://berserk-games.com/knowledgebase/hands/">hand zone</a>.</p> <div class="admonition info"> <p class="admonition-title">getHandObjects(hand_index)</p> <ul> <li><a href="../types"><span class="tag int"></span></a> <strong>hand_index</strong>: An index, representing which hand zone to return Objects for.<ul> <li><span class="critic comment">Optional, defaults to 1.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#cut':\
		'''<h4 id="cut">cut(...)<a class="headerlink" href="#cut" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Cuts (splits) a deck down to a given card. In other words, it counts down from the top of the deck and makes a new deck of that size and puts the remaining cards in the other pile.</p> <p>After the cut, the resulting decks much each have at least 2 cards. This means the parameter used must be between <strong>2</strong> and <strong>totalNumberOfCards - 2</strong>.</p>''',
	'https://api.tabletopsimulator.com/object/#gettable':\
		'''<td><a class="anchor" id="gettable"></a>getTable(<a href="../types"><span class="tag str"></span></a> func_name)</td> <td>Data value of a variable in another Object's script. Can only return a table.</td> <td><a href="../types"><span class="ret tab"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/assetbundle/#playloopingeffect':\
		'''<td><a class="anchor" id="playloopingeffect"></a>playLoopingEffect(<a href="../types"><span class="tag int"></span></a> index)</td> <td>Starts playing a looping effect. Indexs starts at 0.</td> <td><a href="../types"><span class="ret nil"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#flip':\
		'''<td><a class="anchor" id="flip"></a>flip()</td> <td>Flip Object over.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/event/#onobjectsearchstart':\
		'''<h3 id="onobjectsearchstart">onObjectSearchStart(...)<a class="headerlink" href="#onobjectsearchstart" title="Permanent link"> </a></h3> <p>Called when a search is started on any container.</p> <div class="admonition info"> <p class="admonition-title">onObjectSearchStart(obj, player_color)</p> </div> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>obj</strong>: The Object which was searched.</li> <li><a href="../types"><span class="tag str"></span></a> <strong>player_color</strong>: <a href="../player-color">Player Color</a> of the player who triggered the function.</li> </ul>''',
	'https://api.tabletopsimulator.com/object/#highlightoff':\
		'''<td><a class="anchor" id="highlightoff"></a>highlightOff(<a href="../types#color"><span class="tag col"></span></a> color)</td> <td>Removes a highlight from around an Object.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/object/#getstateid':\
		'''<td><a class="anchor" id="getstateid"></a>getStateId()</td> <td>Current <a href="http://berserk-games.com/knowledgebase/creating-states/">state</a> ID (index) an object is in. Returns -1 if there are no other states. State ids (indexes) start at 1.</td> <td><a href="../types"><span class="ret int"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/base/#broadcasttoall':\
		'''<h4 id="broadcasttoall">broadcastToAll(...)<a class="headerlink" href="#broadcasttoall" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Print an on-screen message to all Players.</p> <div class="admonition info"> <p class="admonition-title">broadcastToAll(message, message_tint)</p> <ul> <li><a href="../types"><span class="tag str"></span></a> <strong>message</strong>: Message to display on-screen.</li> <li><a href="../types#color"><span class="tag col"></span></a> <strong>message_tint</strong>: A Table containing the RGB color tint for the text.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#split':\
		'''<h4 id="split">split(...)<a class="headerlink" href="#split" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret tab"></span></a> Splits a deck, as evenly as possible, into a number of piles.</p> <div class="admonition important"> <p class="admonition-title">Important</p> <p>New decks take a frame to be created. This means trying to act on them immediately will not work. Use a coroutine or timer to add a delay.</p> </div> <div class="admonition info"> <p class="admonition-title">split(piles)</p> <ul> <li><a href="../types"><span class="tag int"></span></a> <strong>piles</strong>: How many piles to split the deck into.<ul> <li><span class="critic comment">Optional, if no value is provided, it is split into two piles.</span></li> <li><span class="critic comment">Minimum Value: 2</span></li> <li><span class="critic comment">Maximum Value: Number-Of-Cards-In-Deck / 2</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/base/#copy':\
		'''<h4 id="copy">copy(...)<a class="headerlink" href="#copy" title="Permanent link"> </a></h4> <p><a href="../types"><span class="ret boo"></span></a> Copying a list of Objects the clipboard. Works with <a href="#paste">paste(...)</a>.</p> <div class="admonition info"> <p class="admonition-title">copy(object_list)</p> <ul> <li><a href="../types"><span class="tag tab"></span></a> <strong>object_list</strong>: A Table of in-game objects to be copied.<ul> <li><span class="critic comment">This is similar to highlighting the objects in-game and copying them.</span></li> </ul> </li> </ul> </div>''',
	'https://api.tabletopsimulator.com/object/#dynamic_friction':\
		'''<td><a class="anchor" id="dynamic_friction"></a>dynamic_friction</td> <td>Dynamic friction, value of 0-1. <a href="https://docs.unity3d.com/Manual/class-PhysicMaterial.html">Unity physics material</a>.</td> <td align="left"><a href="../types"><span class="tag flo"></span></a></td>''',
	'https://api.tabletopsimulator.com/ui/#setattributes':\
		'''<h3 id="setattributes">setAttributes(...)<a class="headerlink" href="#setattributes" title="Permanent link"> </a></h3> <p><a href="../types"><span class="ret boo"></span></a> Updates the value of the supplied attributes of a UI element. You do not need to set every attribute with the data table, an element will continue using any previous values you do not overwrite.</p> <div class="admonition important"> <p class="admonition-title">Important</p> <p>This will override the run-time value from the XML UI for all players, forcing them to see the same value.</p> </div>''',
	'https://api.tabletopsimulator.com/object/#setluascript':\
		'''<td><a class="anchor" id="setluascript"></a>setLuaScript(<a href="../types"><span class="tag str"></span></a> script)</td> <td>Input a string as an Object's Lua script. Generally only used after spawning a new Object.</td> <td><a href="../types"><span class="ret boo"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/event/#onobjectloopingeffect':\
		'''<h3 id="onobjectloopingeffect">onObjectLoopingEffect(...)<a class="headerlink" href="#onobjectloopingeffect" title="Permanent link"> </a></h3> <p>Called whenever the looping effect of an <a href="../assetbundle">AssetBundle</a> is activated.</p> <div class="admonition info"> <p class="admonition-title">onObjectLoopingEffect(loop_object, index)</p> <ul> <li><a href="../types"><span class="tag obj"></span></a> <strong>loop_object</strong>: AssetBundle which had its loop activated.</li> <li><a href="../types"><span class="tag int"></span></a> <strong>index</strong>: Index number for the loop activated.</li> </ul> </div>''',
	'https://api.tabletopsimulator.com/assetbundle/#getloopingeffectindex':\
		'''<td><a class="anchor" id="getloopingeffectindex"></a>getLoopingEffectIndex()</td> <td>Index of the currently looping effect. Indexs starts at 0.</td> <td><a href="../types"><span class="ret int"></span></a></td> <td></td>''',
	'https://api.tabletopsimulator.com/lighting/#getambientskycolor':\
		'''<td><a class="anchor" id="getambientskycolor"></a>getAmbientSkyColor()</td> <td>Returns Color Table of the gradient sky. Not used if <code class="codehilite">ambient_type = 1</code>.</td> <td align="right"><a href="../types#color"><span class="ret col"></span></a></td>''',
}